"""
Скрипт для обработки результатов теста ценностные ориентиры в карьере
"""
import pandas as pd
from tkinter import messagebox
from lachesis_support_functions import convert_to_int,round_mean,sort_name_class

class BadValueCok(Exception):
    """
    Исключение для неправильных значений в вариантах ответов
    """
    pass

class BadCountColumnsCok(Exception):
    """
    Исключение для обработки случая если количество колонок не равно 41
    """
    pass


def calc_level_cok(value):
    """
    Функция для подсчета уровня склонности к то или иной сфере
    """
    if value <= 4:
        return 'не выраженная карьерная ориентация'
    else:
        return 'выраженная карьерная ориентация'


def calc_mean(df:pd.DataFrame,type_calc:str,lst_cat:list,val_cat):
    """
    Функция для создания сводных датафреймов

    :param df: датафрейм с данными
    :param type_calc:тип обработки Класс или Номер_класса
    :param lst_cat:список колонок по которым будет формироваться свод
    :param val_cat:значение по которому будет формиваться свод
    :return:датафрейм
    """
    if type_calc == 'Класс':
        calc_mean_df = pd.pivot_table(df, index=lst_cat,
                                           values=[val_cat],
                                           aggfunc=round_mean)
        calc_mean_df.reset_index(inplace=True)
        calc_mean_df.sort_values(by='Класс', key=lambda x: x.map(sort_name_class), inplace=True)  # сортируем
        calc_mean_df.rename(columns={val_cat: 'Среднее значение'}, inplace=True)

        return calc_mean_df
    else:
        calc_mean_df = pd.pivot_table(df, index=lst_cat,
                                           values=val_cat,
                                           aggfunc=round_mean)
        calc_mean_df.reset_index(inplace=True)
        calc_mean_df.rename(columns={val_cat:'Среднее значение'},inplace=True)
        return calc_mean_df



def calc_count_sphere_cok(df:pd.DataFrame, type_calc:str, lst_cat:list, val_cat, col_cat):
    """
    Функция для создания сводных датафреймов

    :param df: датафрейм с данными
    :param type_calc:тип обработки Класс или Номер_класса
    :param lst_cat:список колонок по которым будет формироваться свод
    :param val_cat:значение по которому будет формиваться свод
    :param col_cat: колонка по которой будет формироваться свод
    :return:датафрейм
    """
    if type_calc == 'Класс':
        count_df = pd.pivot_table(df, index=lst_cat,
                                                 columns=col_cat,
                                                 values=val_cat,
                                                 aggfunc='count', margins=True, margins_name='Итого')

        lst_sphere = count_df.columns[:-1]
        count_df.reset_index(inplace=True)

        for sphere in lst_sphere:
            count_df[f'% {sphere} от общего'] = round(
            count_df[f'{sphere}'] / count_df['Итого'], 2) * 100


        part_svod_df = count_df.iloc[:-1:]
        part_svod_df.sort_values(by='Класс', key=lambda x: x.map(sort_name_class), inplace=True)  # сортируем
        itog_svod_df = count_df.iloc[-1:]
        count_df = pd.concat([part_svod_df, itog_svod_df])

        return count_df
    else:
        count_df = pd.pivot_table(df, index=lst_cat,
                                  columns=col_cat,
                                  values=val_cat,
                                  aggfunc='count', margins=True, margins_name='Итого')

        lst_sphere = count_df.columns[:-1]
        count_df.reset_index(inplace=True)

        for sphere in lst_sphere:
            count_df[f'% {sphere} от общего'] = round(
            count_df[f'{sphere}'] / count_df['Итого'], 2) * 100

        return count_df



def calc_count_level_cok(df:pd.DataFrame, type_calc:str, lst_cat:list, val_cat, col_cat, lst_cols:list):
    """
    Функция для создания сводных датафреймов

    :param df: датафрейм с данными
    :param type_calc:тип обработки Класс или Номер_класса
    :param lst_cat:список колонок по которым будет формироваться свод
    :param val_cat:значение по которому будет формиваться свод
    :param col_cat: колонка по которой будет формироваться свод
    :param lst_cols: список с колонками
    :return:датафрейм
    """
    if type_calc == 'Класс':
        count_df = pd.pivot_table(df, index=lst_cat,
                                                 columns=col_cat,
                                                 values=val_cat,
                                                 aggfunc='count', margins=True, margins_name='Итого')


        count_df.reset_index(inplace=True)
        count_df = count_df.reindex(columns=lst_cols)
        count_df['% не выраженная карьерная ориентация от общего'] = round(
            count_df['не выраженная карьерная ориентация'] / count_df['Итого'], 2) * 100
        count_df['% выраженная карьерная ориентация от общего'] = round(
            count_df['выраженная карьерная ориентация'] / count_df['Итого'], 2) * 100

        part_svod_df = count_df.iloc[:-1:]
        part_svod_df.sort_values(by='Класс', key=lambda x: x.map(sort_name_class), inplace=True)  # сортируем
        itog_svod_df = count_df.iloc[-1:]
        count_df = pd.concat([part_svod_df, itog_svod_df])

        return count_df
    else:
        count_df = pd.pivot_table(df, index=lst_cat,
                                  columns=col_cat,
                                  values=val_cat,
                                  aggfunc='count', margins=True, margins_name='Итого')

        count_df.reset_index(inplace=True)
        count_df = count_df.reindex(columns=lst_cols)
        count_df['% не выраженная карьерная ориентация от общего'] = round(
            count_df['не выраженная карьерная ориентация'] / count_df['Итого'], 2) * 100
        count_df['% выраженная карьерная ориентация от общего'] = round(
            count_df['выраженная карьерная ориентация'] / count_df['Итого'], 2) * 100

        return count_df




def extract_key_max_value(cell:str) ->str:
    """
    Функция для извлечения ключа с максимальным значением
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return cell
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return max(dct_result, key=dct_result.get)

def extract_max_value(cell:str):
    """
    Функция для извлечения значения ключа с максимальным значением , ха звучит странно
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return 0
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return dct_result[max(dct_result, key=dct_result.get)]

def processing_result_cok(row):
    """
Функция для вычисления итогового балла  результатов теста Диагностика ценностных ориентаций в карьере
"""

    # Создаем словарь для хранения данных
    dct_type = {'Профессиональная компетентность': 0, 'Менеджмент': 0, 'Автономия (независимость)': 0,
                'Стабильность работы': 0,
                'Стабильность места жительства': 0, 'Служение': 0, 'Вызов': 0,
                'Интеграция стилей жизни': 0, 'Предпринимательство': 0}
    # 1
    dct_type['Профессиональная компетентность'] += row[0]

    # 2
    dct_type['Менеджмент'] += row[1]

    # 3
    dct_type['Автономия (независимость)'] += row[2]

    # 4
    dct_type['Стабильность работы'] += row[3]

    # 5
    dct_type['Служение'] += row[4]

    # 6
    dct_type['Вызов'] += row[5]

    # 7
    dct_type['Интеграция стилей жизни'] += row[6]

    # 8
    dct_type['Предпринимательство'] += row[7]

    # 9
    dct_type['Профессиональная компетентность'] += row[8]

    # 10
    dct_type['Менеджмент'] += row[9]

    # 11
    dct_type['Автономия (независимость)'] += row[10]

    # 12
    dct_type['Стабильность работы'] += row[11]

    # 13
    dct_type['Служение'] += row[12]

    # 14
    dct_type['Вызов'] += row[13]

    # 15
    dct_type['Интеграция стилей жизни'] += row[14]

    # 16
    dct_type['Предпринимательство'] += row[15]

    # 17
    dct_type['Профессиональная компетентность'] += row[16]

    # 18
    dct_type['Менеджмент'] += row[17]

    # 19
    dct_type['Автономия (независимость)'] += row[18]

    # 20
    dct_type['Стабильность места жительства'] += row[19]

    # 21
    dct_type['Служение'] += row[20]

    # 22
    dct_type['Вызов'] += row[21]

    # 23
    dct_type['Интеграция стилей жизни'] += row[22]

    # 24
    dct_type['Предпринимательство'] += row[23]

    # 25
    dct_type['Профессиональная компетентность'] += row[24]

    # 26
    dct_type['Менеджмент'] += row[25]

    # 27
    dct_type['Автономия (независимость)'] += row[26]

    # 28
    dct_type['Стабильность места жительства'] += row[27]

    # 29
    dct_type['Служение'] += row[28]

    # 30
    dct_type['Вызов'] += row[29]

    # 31
    dct_type['Интеграция стилей жизни'] += row[30]

    # 32
    dct_type['Предпринимательство'] += row[31]

    # 33
    dct_type['Профессиональная компетентность'] += row[32]

    # 34
    dct_type['Менеджмент'] += row[33]

    # 35
    dct_type['Автономия (независимость)'] += row[34]

    # 36
    dct_type['Стабильность работы'] += row[35]

    # 37
    dct_type['Служение'] += row[36]

    # 38
    dct_type['Вызов'] += row[37]

    # 39
    dct_type['Интеграция стилей жизни'] += row[38]

    # 40
    dct_type['Предпринимательство'] += row[39]

    # 41
    dct_type['Стабильность места жительства'] += row[40]

    # Делим на 5 результаты
    for key, value in dct_type.items():
        if 'Стабильность' in key:
            dct_type[key] = round(dct_type[key] / 3)
        else:
            dct_type[key] = round(dct_type[key] / 5)
    # Сортируем
    result_lst = sorted(dct_type.items(), key=lambda t: t[1], reverse=True)

    begin_str = '\n'
    # создаем строку с результатами
    for sphere, value in result_lst:
        begin_str += f'{sphere}: {value};\n'

    return begin_str




def processing_cok(base_df: pd.DataFrame, answers_df: pd.DataFrame):
    """
    Функция для обработки теста ценностных ориентиров в карьере
    :param base_df:
    :param answers_df:
    :return:
    """
    try:
        out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами
        if answers_df.shape[1] != 41:
            raise BadCountColumnsCok
        # Переименовываем колонки
        answers_df.columns = [f'Вопрос_ №{i}' for i in range(1, 42)]

        answers_df = answers_df.applymap(convert_to_int) # приводим к инту

        # проверяем правильность
        valid_values = [1, 2, 3, 4,5,6,7,8,9,10]
        # Проверяем, есть ли значения, отличающиеся от указанных в списке
        lst_error_answers = [] # список для хранения строк где найдены неправильные ответы

        for i in range(41):
            mask = ~answers_df.iloc[:,i].isin(valid_values) # проверяем на допустимые значения
            result_check = answers_df.iloc[:,i][mask]
            if len(result_check) != 0:
                error_row = list(map(lambda x: x + 2, result_check.index))
                error_row = list(map(str, error_row))
                error_row_lst = [f'В {i+1} вопросной колонке на строке {value}' for value in error_row]
                error_in_column = ','.join(error_row_lst)
                lst_error_answers.append(error_in_column)

        if len(lst_error_answers) !=0:
            error_message = ';'.join(lst_error_answers)
            raise BadValueCok

        # Создаем колонку для результатов первичного подсчета
        base_df[f'Необработанное'] = answers_df.apply(processing_result_cok, axis=1)
        base_df[f'Обработанное'] = base_df[f'Необработанное'].apply(
            extract_key_max_value)
        base_df[f'Максимум'] = base_df[f'Необработанное'].apply(
            extract_max_value)
        base_df[f'Уровень'] = base_df[f'Максимум'].apply(
            calc_level_cok)



        # Создаем датафрейм для создания части в общий датафрейм
        part_df = pd.DataFrame(columns=['ЦОК_Необработанное', 'ЦОК_Обработанное','ЦОК_Максимум','ЦОК_Уровень'])
        part_df['ЦОК_Необработанное'] = base_df['Необработанное']
        part_df['ЦОК_Обработанное'] = base_df['Обработанное']
        part_df['ЦОК_Максимум'] = base_df['Максимум']
        part_df['ЦОК_Уровень'] = base_df['Уровень']

        base_df.sort_values(by='Максимум', ascending=False, inplace=True)  # сортируем
        out_answer_df = pd.concat([out_answer_df, answers_df], axis=1)  # Датафрейм для проверки
        """
             Создаем колонку с описанием результата
             """
        description_result = """
         По каждой из девяти карьерных ориентаций подсчитывается количество баллов. Таким образом определяется ведущая карьерная ориентация - количество набранных для этого баллов должно быть не менее пяти. Иногда ведущей не становится ни одна карьерная ориентация - в таком случае карьера не является центральной в жизни личности.

         1) Профессиональная компетентность -быть профессионалом, мастером в своем деле.
         Эта ориентация связана с наличием способностей и талантов в определенной области.
         Люди с такой ориентацией хотят быть мастерами своего дела, они бывают особенно счастливы, когда достигают успеха в профессиональной сфере, но быстро теряют интерес к работе, которая не позволяет развивать их способности. Вряд ли их заинтересует даже значительно более высокая должность, если она не связана с их профессиональными компетенциями. Они ищут признания своих талантов, что должно выражаться в статусе, соответствующем их мастерству. Они готовы управлять другими в пределах своей компетенции, но управление не представляет для них особого интереса. Поэтому многие из этой категории отвергают работу руководителя, управление рассматривают как необходимое условие для продвижения в своей профессиональной сфере.
         2) Менеджмент - Управлять – людьми, проектами, бизнес-процессами и т.п.
         Для этих людей первостепенное значение имеет ориентация личности на интеграцию усилий других людей, полнота ответственности за конечный результат и соединение различных функций организации. С возрастом и опытом эта карьерная ориентация проявляется сильнее. Возможности для лидерства, высокого дохода, повышенных уровней ответственности и вклад в успех своей организации являются ключевыми ценностями и мотивами. Самое главное для них – управление: людьми, проектами, любыми бизнес-процессами – это в целом не имеет принципиального значения. Центральное понятие их профессионального развития – власть, осознание того, что от них зависит принятие ключевых решений. Причем для них не является принципиальным управление собственным проектом или целым бизнесом, скорее наоборот, они в большей степени ориентированы на построение карьеры в наемном менеджменте, но при условии, что им будут делегированы значительные полномочия. Человек с такой ориентацией будет считать, что не достиг цели своей карьеры, пока не займет должность, на которой будет управлять различными сторонами деятельности предприятия.
         3) Автономия (независимость) – Главное в работе – это свобода и независимость.
         Первичная забота личности с такой ориентацией –освобождение от организационных правил, предписаний и ограничений. Они испытывают трудности, связанные с установленными правилами, процедурами, рабочим днем, дисциплиной, формой одежды и т.д. Они любят выполнять работу своим способом, темпом и по собственным стандартам. Они не любят, когда работа вмешивается в их частную жизнь, поэтому предпочитают делать независимую карьеру собственным путем. Они скорее выберут низкосортную работу, чем откажутся от автономии и независимости. Для них первоочередная задача развития карьеры – получить возможность работать самостоятельно, самому решать, как, когда и что делать для достижения тех или иных целей. Карьера для них – это, прежде всего, способ реализации их свободы, поэтому любые рамки и строгое подчинение оттолкнут их даже от внешне привлекательной вакансии. Такой человек может работать в организации, которая обеспечивает достаточную степень свободы.
         4) Стабильность работы - стабильная, надежная работа на длительное время.
         Эти люди испытывают потребность в безопасности, защите и возможности прогнозирования и будут искать постоянную работу с минимальной вероятностью увольнения. Эти люди отождествляют свою работу со своей карьерой. Их потребность в безопасности и стабильности ограничивает выбор вариантов	карьеры.
         Авантюрные или краткосрочные проекты и только становящиеся на ноги компании их, скорее всего, не привлекают. Они очень ценят социальные гарантии, которые может предложить работодатель, и, как правило, их выбор места работы связан именно с длительным контрактом и стабильным положением компании на рынке. Такие люди ответственность за управление своей карьерой перекладывают на нанимателя. Часто данная ценностная ориентация сочетается с невысоким уровнем притязаний.
         5) Стабильность места жительства - Главное – жить в своем городе (минимум переездов, командировок).
         Важнее остаться на одном месте жительства, чем получить повышение или новую работу на новой местности. Переезд для таких людей неприемлем, и даже частые командировки являются для них негативным фактором при рассмотрении	предложения о работе.
         6) Служение - Воплощать в работе свои идеалы и ценности.
         Данная ценностная ориентация характерна для людей, занимающихся делом по причине желания реализовать в своей работе главные ценности. Они часто ориентированы больше на ценности, чем на требующиеся в данном виде работы способности. Они стремятся приносить пользу людям, обществу, для них очень важно видеть конкретные плоды своей работы, даже если они и не выражены в материальном эквиваленте. Основной тезис построения их карьеры – получить возможность максимально эффективно использовать их таланты и опыт для реализации общественно	важной цели. Люди, ориентированные на служение, общительны и часто консервативны. Человек с такой ориентацией не будет работать в организации, которая враждебна его целям и ценностям.
         7) Вызов - Сделать   невозможное – возможным, решать   уникальные   задачи.
         Эти люди считают успехом преодоление непреодолимых препятствий, решение неразрешимых проблем или просто выигрыш. Они ориентированы на то, чтобы “бросать вызов”. Для одних людей вызов представляет более трудная работа, для других это — конкуренция и межличностные отношения. Они ориентированы на решение заведомо сложных задач, преодоление препятствий ради победы в конкурентной борьбе. Они чувствуют себя преуспевающими только тогда, когда постоянно вовлечены в решение трудных проблем или в ситуацию соревнования. Карьера для них – это постоянный вызов их профессионализму, и они всегда готовы его принять. Социальная ситуация чаще всего рассматривается с позиции “выигрыша – проигрыша”. Процесс борьбы и победа более важна для них, чем конкретная область деятельности или квалификация. Новизна, разнообразие и вызов имеют для них очень большую ценность, и, если все идет слишком просто, им становиться скучно.
         8) Интеграция стилей жизни - Сохранение гармонии между сложившейся личной жизнью и карьерой.
         Для людей этой категории карьера должна ассоциироваться с общим стилем жизни, уравновешивая потребности человека, семьи и карьеры. Они хотят, чтобы организационные отношения отражали бы уважение к их личным и семейным проблемам.
         Выбирать и поддерживать определенный образ жизни для них важнее, чем добиваться успеха в карьере. Развитие карьеры их привлекает только в том случае, если она не нарушает привычный им стиль жизни и окружение. Для них важно, чтобы все было уравновешено – карьера, семья, личные интересы и т.п. Жертвовать   чем-то   одним   ради   другого   им    явно    не    свойственно. Такие люди обычно в своем поведении проявляют конформность (тенденция изменять свое поведение в зависимости от влияния других людей с тем, чтобы оно соответствовало мнению окружающих)
         9) Предпринимательство – Создавать новые организации, товары, услуги.
         Этим людям нравится создавать новые организации, товары или услуги, которые могут быть отождествлены с их усилиями. Работать на других – это не их, они – предприниматели по духу, и цель их карьеры – создать что-то новое, организовать свое дело, воплотить в жизнь идею, всецело принадлежащую только им. Вершина карьеры в их понимании – собственный бизнес.
         """
        # создаем описание результата
        base_df[f'Описание_результата'] = 'Диагностика ценностных ориентаций в карьере.\n' + base_df[
            f'Необработанное'] + description_result
        part_df['ЦОК_Описание_результата'] = base_df[f'Описание_результата']





        # Общий свод по уровням склонности всего в процентном соотношении
        base_svod_all_df = pd.DataFrame(
            index=['не выраженная карьерная ориентация', 'выраженная карьерная ориентация','Итого'])

        svod_level_df = pd.pivot_table(base_df, index='Уровень',
                                     values='Максимум',
                                     aggfunc='count')

        svod_level_df['% от общего'] = round(
            svod_level_df['Максимум'] / svod_level_df['Максимум'].sum(), 3) * 100

        base_svod_all_df = base_svod_all_df.join(svod_level_df)

        # # Создаем суммирующую строку
        base_svod_all_df.loc['Итого'] = svod_level_df.sum()
        base_svod_all_df.reset_index(inplace=True)
        base_svod_all_df.rename(columns={'index': 'Уровень выраженности карьерной ориентации', 'Максимум': 'Количество'}, inplace=True)


        # формируем основной словарь
        out_dct = {'Списочный результат': base_df, 'Список для проверки': out_answer_df,
                   'Свод по уровням': base_svod_all_df,
                   }

        lst_level = ['не выраженная карьерная ориентация', 'выраженная карьерная ориентация']
        dct_level = dict()

        for level in lst_level:
            temp_df = base_df[base_df['Уровень'] == level]
            if temp_df.shape[0] != 0:
                if level == 'не выраженная карьерная ориентация':
                    level = 'не выражена'
                elif level == 'выраженная карьерная ориентация':
                    level = 'выражена'
                dct_level[level] = temp_df

        out_dct.update(dct_level)

        # Общий свод по сферам всего в процентном соотношении
        svod_sphere_df = pd.pivot_table(base_df, index='Обработанное',
                                        values='Максимум',
                                        aggfunc='count')

        svod_sphere_df['% от общего'] = round(
            svod_sphere_df['Максимум'] / svod_sphere_df['Максимум'].sum(), 3) * 100

        svod_sphere_df.sort_index(inplace=True)

        # # Создаем суммирующую строку
        svod_sphere_df.loc['Итого'] = svod_sphere_df.sum()
        svod_sphere_df.reset_index(inplace=True)
        svod_sphere_df.rename(columns={'index': 'Карьерная ориентация', 'Максимум': 'Количество'},
                              inplace=True)

        # формируем списки по сферам деятельности
        lst_sphere = base_df['Обработанное'].unique()
        lst_sphere.sort()  # сортируем
        dct_sphere = {'Свод по карьерным ориентациям': svod_sphere_df}  # словарь для хранения списков

        for sphere in lst_sphere:
            temp_df = base_df[base_df['Обработанное'] == sphere]
            dct_sphere[sphere] = temp_df

        out_dct.update(dct_sphere)

        """
            Своды 
            """
        lst_reindex_group_cols = ['Класс','не выраженная карьерная ориентация', 'выраженная карьерная ориентация' ,'Итого']
        lst_reindex_group_sex_cols = ['Класс','Пол','не выраженная карьерная ориентация', 'выраженная карьерная ориентация','Итого']

        lst_reindex_course_cols = ['Номер_класса','не выраженная карьерная ориентация', 'выраженная карьерная ориентация' ,'Итого']
        lst_reindex_course_sex_cols = ['Номер_класса','Пол','не выраженная карьерная ориентация', 'выраженная карьерная ориентация','Итого']


        # Своды по уровням
        # Класс
        svod_group_level_df = calc_mean(base_df, 'Класс', ['Класс', 'Уровень'], 'Максимум')
        svod_count_group_level_df = calc_count_level_cok(base_df, 'Класс', ['Класс'], 'Максимум', 'Уровень',
                                                         lst_reindex_group_cols)

        # Класс Пол
        svod_group_level_sex_df = calc_mean(base_df, 'Класс', ['Класс', 'Уровень', 'Пол'], 'Максимум')
        svod_count_group_level_sex_df = calc_count_level_cok(base_df, 'Класс', ['Класс', 'Пол'], 'Максимум', 'Уровень',
                                                             lst_reindex_group_sex_cols)

        # Номер_класса
        svod_course_level_df = calc_mean(base_df, 'Номер_класса', ['Номер_класса', 'Уровень'], 'Максимум')
        svod_count_course_level_df = calc_count_level_cok(base_df, 'Номер_класса', ['Номер_класса'], 'Максимум',
                                                           'Уровень', lst_reindex_course_cols)

        # Номер_класса Пол
        svod_course_level_sex_df = calc_mean(base_df, 'Номер_класса', ['Номер_класса', 'Уровень', 'Пол'], 'Максимум')
        svod_count_course_level_sex_df = calc_count_level_cok(base_df, 'Номер_класса', ['Номер_класса', 'Пол'],
                                                               'Максимум',
                                                               'Уровень', lst_reindex_course_sex_cols)

        # Своды по сферам
        # Класс
        svod_group_sphere_df = calc_mean(base_df,'Класс',['Класс','Обработанное'],'Максимум')
        svod_count_group_sphere_df = calc_count_sphere_cok(base_df, 'Класс', ['Класс'], 'Максимум', 'Обработанное')

        # Класс Пол
        svod_group_sphere_sex_df = calc_mean(base_df,'Класс',['Класс','Обработанное','Пол'],'Максимум')
        svod_count_group_sphere_sex_df = calc_count_sphere_cok(base_df, 'Класс', ['Класс', 'Пол'], 'Максимум', 'Обработанное')

        # Номер_класса
        svod_course_sphere_df = calc_mean(base_df,'Номер_класса',['Номер_класса','Обработанное'],'Максимум')
        svod_count_course_sphere_df = calc_count_sphere_cok(base_df, 'Номер_класса', ['Номер_класса'], 'Максимум', 'Обработанное')

        # Номер_класса Пол
        svod_course_sphere_sex_df = calc_mean(base_df,'Номер_класса',['Номер_класса','Обработанное','Пол'],'Максимум')
        svod_count_course_sphere_sex_df = calc_count_sphere_cok(base_df, 'Номер_класса', ['Номер_класса', 'Пол'], 'Максимум', 'Обработанное')

        svod_dct =  {'Ср. Уровень Класс':svod_group_level_df,'Кол. Уровень Класс':svod_count_group_level_df,
                     'Ср. Уровень Класс Пол':svod_group_level_sex_df,'Кол. Уровень Класс Пол':svod_count_group_level_sex_df,
                     'Ср. Уровень Номер_класса': svod_course_level_df, 'Кол. Уровень Номер_класса': svod_count_course_level_df,
                     'Ср. Уровень Номер_класса Пол': svod_course_level_sex_df, 'Кол. Уровень Номер_класса Пол': svod_count_course_level_sex_df,

                     'Ср. Сфера Класс':svod_group_sphere_df,'Кол. Сфера Класс':svod_count_group_sphere_df,
                     'Ср. Сфера Класс Пол':svod_group_sphere_sex_df,'Кол. Сфера Класс Пол':svod_count_group_sphere_sex_df,
                     'Ср. Сфера Номер_класса': svod_course_sphere_df, 'Кол. Сфера Номер_класса': svod_count_course_sphere_df,
                     'Ср. Сфера Номер_класса Пол': svod_course_sphere_sex_df, 'Кол. Сфера Номер_класса Пол': svod_count_course_sphere_sex_df,

                     }
        out_dct.update(svod_dct) # добавляем чтобы сохранить порядок





        return out_dct, part_df
    except BadValueCok:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Ценностные ориентиры карьеры обнаружены неправильные варианты ответов. Проверьте ответы на указанных строках:\n'
                             f'{error_message}\n'
                             f'Используйте при создании Яндекс-формы написание вариантов ответа из руководства пользователя программы Лахесис.')


    except BadCountColumnsCok:
        messagebox.showerror('Лахеcис',
                             f'Проверьте количество колонок с ответами на тест Ценностные ориентиры карьеры\n'
                             f'Должно быть 41 колонка с ответами')

