"""
Скрипт для обработки теста Шкала депрессии Бека
"""
import pandas as pd
import numpy as np


def calc_value_bek_depress(ser:pd.Series):
    """
    Функция для подсчета баллов по каждой группе вопросов
    """
    lst_values = ser.tolist() # превращаем в список
    first = lst_values[0] # первое утверждение
    second = lst_values[1] # второе утверждение
    third = lst_values[2] # третье утверждение
    four = lst_values[3] # четвертое утверждение

    # считаем количество ответов в диапазоне
    count_answer_lst = [value for value in lst_values if pd.notna(value)] # отбрасываем незаполненное
    if len(count_answer_lst) > 2:
        # возвращаем либо второй либо третий вариант поскольку всего овтетов 4 то в любом случае какой то из них будет заполнен
        if pd.notna(second):
            return second
        else:
            return third
    # возвращаем результат суммирования
    return sum(count_answer_lst)


def calc_level_bek_depress(value):
    """
    Функция для подсчета уровня депрессии Бека
    """
    if 0 <= value <= 9:
        return 'удовлетворительное эмоциональное состояние'
    elif 10 <= value <= 19:
        return 'легкая депрессия'
    elif 20 <= value <= 22:
        return 'умеренная депрессия'
    else:
        return 'тяжелая депрессия'








def processing_bek_depress(base_df: pd.DataFrame, answers_df: pd.DataFrame):
    """
    Функция для обработки результатов теста
    """

    out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами

    # словарь для замены слов на числа
    dct_replace_value = {'Мне не грустно': 0,
                         'Мне грустно или тоскливо': 1,
                         'Мне все время тоскливо или грустно и я ничего не могу с собой поделать': 2,
                         'Мне так грустно или печально, что я не могу этого вынести': 3,

                         'Я смотрю в будущее без особого разочарования': 0,
                         'Я испытываю разочарование в будущем': 1,
                         'Я чувствую, что мне нечего ждать впереди': 2,
                         'Я чувствую, что будущее безнадежно и поворота к лучшему быть не может': 3,

                         'Я не чувствую себя неудачником': 0,
                         'Я чувствую, что неудачи случались у меня чаще, чем у других людей': 1,
                         'Когда оглядываюсь на свою жизнь, я вижу лишь цепь неудач': 2,
                         'Я чувствую, что потерпел неудачу как личность (родители)': 3,

                         'У меня не потерян интерес к другим людям': 0,
                         'Я меньше, чем бывало, интересуюсь другими людьми': 1,
                         'У меня потерян почти весь интерес к другим людям и почти нет никаких чувств к ним': 2,
                         'У меня потерян всякий интерес к другим людям и они меня совершенно не заботят': 3,

                         'Я принимаю решения примерно так же легко, как всегда': 0,
                         'Я пытаюсь отсрочить принятые решения': 1,
                         'Принятие решений представляет для меня огромную трудность': 2,
                         'Я больше совсем не могу принимать решения': 3,

                         'Я не чувствую, что выгляжу сколько-нибудь хуже, чем обычно': 0,
                         'Меня беспокоит то, что я выгляжу непривлекательно': 1,
                         'Я чувствую, что в моем внешнем виде происходят постоянные изменения, делающие меня непривлекательным': 2,
                         'Я чувствую, что выгляжу гадко и отталкивающе': 3,

                         'Я не испытываю никакой особенной неудовлетворенности': 0,
                         'Ничто не радует меня так, как раньше': 1,
                         'Ничто больше не дает мне удовлетворения': 2,
                         'Меня не удовлетворяет всё': 3,

                         'Я не чувствую никакой особенной вины': 0,
                         'Большую часть времени я чувствую себя скверным и ничтожным': 1,
                         'У меня довольно сильное чувство вины': 2,
                         'Я чувствую себя очень скверным и никчемным': 3,

                         'Я могу работать примерно так же хорошо, как и раньше': 0,
                         'Мне нужно делать дополнительные усилия, чтобы что-то сделать': 1,
                         'Я с трудом заставляю себя делать что-либо': 2,
                         'Я не могу выполнять никакую работу': 3,

                         'Я не испытываю разочарования в себе': 0,
                         'Я разочарован в себе': 1,
                         'У меня отвращение к себе': 2,
                         'Я ненавижу себя': 3,

                         'У меня нет никаких мыслей о самоповреждении': 0,
                         'Я чувствую, что мне было бы лучше умереть': 1,
                         'У меня есть определенные планы совершения самоубийства': 2,
                         'Я покончу с собой при первой возможности': 3,

                         'Я устаю ничуть не больше, чем обычно': 0,
                         'Я устаю быстрее, чем раньше': 1,
                         'Я устаю от любого занятия': 2,
                         'Я устал чем бы то ни было заниматься': 3,

                         'Мой аппетит не хуже, чем обычно': 0,
                         'Мой аппетит не так хорош, как бывало': 1,
                         'Мой аппетит теперь гораздо хуже': 2,
                         'У меня совсем нет аппетита': 3,
                         }

    answers_df.replace(dct_replace_value, inplace=True)  # заменяем слова на цифры для подсчетов

    counter = 0 # счетчик обработанных колонок
    for i in range(1,14):
        temp_lst_cols = list(answers_df.columns)[counter:counter+4] # отрезаем 4 колонки
        base_df[f'Группа утверждений №{i}'] = answers_df[temp_lst_cols].apply(calc_value_bek_depress, axis=1)
        counter += 4

    lst_sum_cols = [value for value in base_df.columns if 'Группа' in value]
    base_df['Значение_уровня_депрессии'] = base_df[lst_sum_cols].sum(axis=1) # получаем сумму значений
    base_df['Уровень_депрессии'] = base_df['Значение_уровня_депрессии'].apply(calc_level_bek_depress) # считакем уровень


    base_df.to_excel('data/ba.xlsx')

