"""
Скрипт для обработки теста Диагностика уровня эмоционального выгорания В.В.Бойко (в модиф. Е.Ильина)
"""
import pandas as pd
import re
from tkinter import messagebox
from lachesis_support_functions import round_mean



class BadOrderBOIEB(Exception):
    """
    Исключение для обработки случая когда колонки не совпадают
    """
    pass


class BadValueBOIEB(Exception):
    """
    Исключение для неправильных значений в вариантах ответов
    """
    pass

class BadCountColumnsBOIEB(Exception):
    """
    Исключение для обработки случая если количество колонок не равно 35
    """
    pass


def calc_sub_value_dissatisfaction(row):
    """
    Функция для подсчета значения субшкалы Неудовлетворенность собой
    :param row: строка с ответами
    :return: число
    """
    lst_pr = [1,6,11,16,21,26,31] # вопросы
    result = 0 # результат
    for idx, value in enumerate(row):
        if idx +1 in lst_pr:
            if idx + 1 == 1: # Вопрос 1
                if value == 'нет':
                    result += 3
            elif idx + 1 == 6: # Вопрос 6
                if value == 'да':
                    result += 2
            elif idx + 1 == 11: # Вопрос 11
                if value == 'да':
                    result += 2
            elif idx + 1 == 16: # Вопрос 16
                if value == 'нет':
                    result += 10
            elif idx + 1 == 21: # Вопрос 21
                if value == 'нет':
                    result += 5
            elif idx + 1 == 26: # Вопрос 26
                if value == 'да':
                    result += 5
            elif idx + 1 == 31: # Вопрос 31
                if value == 'да':
                    result += 3

    return result


def calc_level_sub(value):
    """
    Функция для подсчета уровня
    :param value:
    :return:
    """
    if 0 <= value <= 9:
        return 'не сложившийся симптом'
    elif 10 <= value <= 15:
        return 'складывающийся симптом'
    else:
        return 'сложившийся симптом'


def calc_sub_value_trapped(row):
    """
    Функция для подсчета значения субшкалы Загнанность в клетку
    :param row: строка с ответами
    :return: число
    """
    lst_pr = [2,7,12,17,22,27,32] # вопросы
    result = 0 # результат
    for idx, value in enumerate(row):
        if idx +1 in lst_pr:
            if idx + 1 == 2: # Вопрос 2
                if value == 'да':
                    result += 10
            elif idx +1 == 7: # Вопрос 7
                if value == 'да':
                    result += 5
            elif idx +1 == 12: # Вопрос 12
                if value == 'да':
                    result += 2
            elif idx +1 == 17: # Вопрос 17
                if value == 'да':
                    result += 2
            elif idx +1 == 22: # Вопрос 22
                if value == 'да':
                    result += 5
            elif idx +1 == 27: # Вопрос 27
                if value == 'да':
                    result += 1
            elif idx +1 == 32: # Вопрос 32
                if value == 'нет':
                    result += 5
    return result


def calc_sub_value_reduc(row):
    """
    Функция для подсчета значения субшкалы Редукция профессиональных обязанностей
    :param row: строка с ответами
    :return: число
    """
    lst_pr = [3,8,13,18,26,28,33] # вопросы
    result = 0 # результат
    for idx, value in enumerate(row):
        if idx +1 in lst_pr:
            if idx + 1 == 3: # Вопрос 3
                if value == 'да':
                    result += 5
            elif idx +1 == 8: # Вопрос 8
                if value == 'да':
                    result += 5
            elif idx +1 == 13: # Вопрос 13
                if value == 'да':
                    result += 2
            elif idx +1 == 18: # Вопрос 18
                if value == 'нет':
                    result += 2
            elif idx +1 == 26: # Вопрос 26
                if value == 'да':
                    result += 3
            elif idx +1 == 28: # Вопрос 28
                if value == 'да':
                    result += 3
            elif idx +1 == 33: # Вопрос 33
                if value == 'да':
                    result += 10
    return result


def calc_sub_value_detachment(row):
    """
    Функция для подсчета значения субшкалы Эмоциональная отстраненность
    :param row: строка с ответами
    :return: число
    """
    lst_pr = [4,9,14,19,24,29,34] # вопросы
    result = 0 # результат
    for idx, value in enumerate(row):
        if idx +1 in lst_pr:
            if idx + 1 == 4: # Вопрос 4
                if value == 'да':
                    result += 2
            elif idx +1 == 9: # Вопрос 9
                if value == 'да':
                    result += 3
            elif idx +1 == 14: # Вопрос 14
                if value == 'нет':
                    result += 2
            elif idx +1 == 19: # Вопрос 19
                if value == 'да':
                    result += 3
            elif idx +1 == 24: # Вопрос 24
                if value == 'да':
                    result += 5
            elif idx +1 == 29: # Вопрос 29
                if value == 'да':
                    result += 5
            elif idx +1 == 34: # Вопрос 34
                if value == 'да':
                    result += 10
    return result



def calc_sub_value_self_detachment(row):
    """
    Функция для подсчета значения субшкалы Эмоциональная отстраненность
    :param row: строка с ответами
    :return: число
    """
    lst_pr = [5,10,15,20,25,30,35] # вопросы
    result = 0 # результат
    for idx, value in enumerate(row):
        if idx +1 in lst_pr:
            if idx + 1 == 5: # Вопрос 5
                if value == 'да':
                    result += 5
            elif idx +1 == 10: # Вопрос 10
                if value == 'да':
                    result += 3
            elif idx +1 == 15: # Вопрос 15
                if value == 'да':
                    result += 3
            elif idx +1 == 20: # Вопрос 20
                if value == 'да':
                    result += 2
            elif idx +1 == 25: # Вопрос 25
                if value == 'да':
                    result += 5
            elif idx +1 == 30: # Вопрос 30
                if value == 'да':
                    result += 2
            elif idx +1 == 35: # Вопрос 35
                if value == 'да':
                    result += 10

    return result



def calc_level_attrition(value):
    """
    Функция для подсчета уровня
    :param value:
    :return:
    """
    if 0 <= value <= 45:
        return 'отсутствие выгорания'
    elif 46 <= value <= 49:
        return 'симптомы начинающегося выгорания'
    elif 50 <= value <= 75:
        return 'начинающееся выгорание'
    elif 76 <= value <= 79:
        return 'симптомы выгорания'
    else:
        return 'имеется выгорание'









def processing_boiko_emotional_burnout(base_df: pd.DataFrame, answers_df: pd.DataFrame,lst_svod_cols:list):
    """
    Функция для обработки
    :param base_df: часть датафрейма с описательными колонками
    :param answers_df: часть датафрейма с ответами
    :param lst_svod_cols:  список с колонками по которым нужно делать свод
    """
    out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами
    if len(answers_df.columns) != 35:  # проверяем количество колонок с вопросами
        raise BadCountColumnsBOIEB

    lst_check_cols = ['Сегодня я доволен своей профессией не меньше, чем в начале карьеры.',
                      'Я ошибся в выборе профессии или профиля деятельности (занимаю не свое место).',
                      'Когда я чувствую усталость или напряжение, то стараюсь поскорее “свернуть” дело.',
                      'Моя работа притупляет эмоции.',
                      'Я откровенно устал от проблем, с которыми приходится иметь дело на работе.',
                      'Работа приносит мне все больше удовлетворения.',
                      'Я бы сменил место работы, если бы представилась возможность.',
                      'Из-за усталости или напряжения я уделяю своим делам меньше внимания, чем положено.',
                      'Я спокойно воспринимаю претензии ко мне начальства и коллег по работе.',
                      'Общение с коллегами по работе побуждает меня сторониться людей.',
                      'Мне все труднее устанавливать и поддерживать контакты с коллегами.',
                      'Обстановка на работе мне кажется очень трудной, сложной.',
                      'Бывают дни, когда мое эмоциональное состояние плохо сказывается на результатах работы.',
                      'Я очень переживаю за свою работу.',
                      'Коллегам по работе я уделяю внимания больше, чем получаю от них.',
                      'Я часто радуюсь, видя, что моя работа приносит пользу людям.',
                      'Последнее время меня преследуют неудачи на работе.',
                      'Я обычно проявляю интерес к коллегам и помимо того, что касается дела.',
                      'Я иногда ловлю себя на мысли, что работаю автоматически, без души.',
                      'По работе встречаются настолько неприятные люди, что невольно желаешь им чего-нибудь плохого.',
                      'Успехи в работе вдохновляют меня.',
                      'Ситуация на работе, в которой я оказался, кажется почти безвыходной.',
                      'Я часто работаю через силу.',
                      'В работе с людьми я руководствуюсь принципом: не трать нервы, береги здоровье.',
                      'Иногда я иду на работу с тяжелым чувством: как все надоело, никого бы не видеть и не слышать.',
                      'Иногда мне кажется, что результаты моей работы не стоят тех усилий, которые я затрачиваю.',
                      'Если бы мне повезло с работой, я был бы более счастлив.',
                      'Обычно я тороплю время: скорее бы рабочий день кончился.',
                      'Работая с людьми, я обычно как бы ставлю экран, защищающий от чужих страданий и отрицательных эмоций.',
                      'Моя работа меня очень разочаровала.',
                      'Мои требования к выполняемой работе выше, чем-то, чего я достигаю в силу обстоятельств.',
                      'Моя карьера сложилась удачно.',
                      'Если предоставляется возможность, я уделяю работе меньше внимания, но так, чтобы этого никто не заметил.',
                      'Ко всему, что происходит на работе, я утратил интерес.',
                      'Моя работа плохо на меня повлияла – обозлила, притупила эмоции, сделала нервным.',
                      ]

    # Проверяем порядок колонок
    order_main_columns = lst_check_cols  # порядок колонок и названий как должно быть
    order_temp_df_columns = list(answers_df.columns)  # порядок колонок проверяемого файла
    error_order_lst = []  # список для несовпадающих пар
    # Сравниваем попарно колонки
    for main, temp in zip(order_main_columns, order_temp_df_columns):
        if main != temp:
            error_order_lst.append(f'На месте колонки {main} находится колонка {temp}')
            error_order_message = ';'.join(error_order_lst)
    if len(error_order_lst) != 0:
        raise BadOrderBOIEB

    valid_values = ['да','нет']
    # Проверяем, есть ли значения, отличающиеся от указанных в списке
    lst_error_answers = []  # список для хранения строк где найдены неправильные ответы

    for i in range(35):
        mask = ~answers_df.iloc[:, i].isin(valid_values)  # проверяем на допустимые значения
        result_check = answers_df.iloc[:, i][mask]
        if len(result_check) != 0:
            error_row = list(map(lambda x: x + 2, result_check.index))
            error_row = list(map(str, error_row))
            error_row_lst = [f'В {i + 1} вопросной колонке на строке {value}' for value in error_row]
            error_in_column = ','.join(error_row_lst)
            lst_error_answers.append(error_in_column)

    if len(lst_error_answers) != 0:
        error_message = ';'.join(lst_error_answers)
        raise BadValueBOIEB

    # Симптом Неудовлетворенность собой
    base_df['Значение_симптома_Неудовлетворенность_собой'] = answers_df.apply(calc_sub_value_dissatisfaction, axis=1)
    base_df['Норма_Неудовлетворенность_собой'] = '0-9 баллов'
    base_df['Уровень_симптома_Неудовлетворенность_собой'] = base_df['Значение_симптома_Неудовлетворенность_собой'].apply(
        calc_level_sub)

    # Симптом Загнанность в клетку
    base_df['Значение_симптома_Загнанность_в_клетку'] = answers_df.apply(calc_sub_value_trapped, axis=1)
    base_df['Норма_Загнанность_в_клетку'] = '0-9 баллов'
    base_df['Уровень_симптома_Загнанность_в_клетку'] = base_df['Значение_симптома_Загнанность_в_клетку'].apply(
        calc_level_sub)


    # Симптом Редукция профессиональных обязанностей
    base_df['Значение_симптома_Редукция_профессиональных_обязанностей'] = answers_df.apply(calc_sub_value_reduc, axis=1)
    base_df['Норма_Редукция_профессиональных_обязанностей'] = '0-9 баллов'
    base_df['Уровень_симптома_Редукция_профессиональных_обязанностей'] = base_df['Значение_симптома_Редукция_профессиональных_обязанностей'].apply(
        calc_level_sub)

    # Симптом Эмоциональная отстраненность
    base_df['Значение_симптома_Эмоциональная_отстраненность'] = answers_df.apply(calc_sub_value_detachment, axis=1)
    base_df['Норма_Эмоциональная_отстраненность'] = '0-9 баллов'
    base_df['Уровень_симптома_Эмоциональная_отстраненность'] = base_df['Значение_симптома_Эмоциональная_отстраненность'].apply(
        calc_level_sub)

    # Симптом Личностная отстраненность (деперсонализация)»:
    base_df['Значение_симптома_Личностная_отстраненность'] = answers_df.apply(calc_sub_value_self_detachment, axis=1)
    base_df['Норма_Личностная_отстраненность'] = '0-9 баллов'
    base_df['Уровень_симптома_Личностная_отстраненность'] = base_df['Значение_симптома_Личностная_отстраненность'].apply(
        calc_level_sub)

    base_df['Значение_уровня_выгорания'] = base_df[['Значение_симптома_Неудовлетворенность_собой','Значение_симптома_Загнанность_в_клетку',
                                                    'Значение_симптома_Редукция_профессиональных_обязанностей','Значение_симптома_Эмоциональная_отстраненность',
                                                    'Значение_симптома_Личностная_отстраненность']].sum(axis=1)
    base_df['Уровень_выгорания'] = base_df['Значение_уровня_выгорания'].apply(
        calc_level_attrition)








    base_df.to_excel('res.xlsx')


