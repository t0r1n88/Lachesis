# Скрипт для обработки результатов теста Профессиональное выгорание методика Н. Е. Водопьяновой на основе модели К. Маслач и С. Джексон
import pandas as pd




class BadOrderVODPB(Exception):
    """
    Исключение для обработки случая когда колонки не совпадают
    """
    pass


class BadValueVODPB(Exception):
    """
    Исключение для неправильных значений в вариантах ответов
    """
    pass

class BadCountColumnsVODPB(Exception):
    """
    Исключение для обработки случая если количество колонок не равно 22
    """
    pass



def processing_vod_prof_burnout(base_df: pd.DataFrame, answers_df: pd.DataFrame,lst_svod_cols:list):
    """
    Функция для обработки
    :param base_df: часть датафрейма с описательными колонками
    :param answers_df: часть датафрейма с ответами
    :param lst_svod_cols:  список с колонками по которым нужно делать свод
    """
    print(lst_svod_cols)
    if len(lst_svod_cols) == 0:
        out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами
        if len(answers_df.columns) != 22:  # проверяем количество колонок с вопросами
            raise BadCountColumnsVODPB

        lst_check_cols = ['К концу рабочей недели я чувствую себя эмоционально опустошенным(ой).',
                          'К концу рабочего дня я чувствую себя как выжатый лимон.',
                          'Я чувствую себя усталым(ой), когда встаю утром и должен (должна) идти на работу.',
                          'Результаты моей работы не стоят тех усилий, которые я затрачиваю.',
                          'Меня раздражают люди, которые долго и много говорят о своих страхах.',
                          'Я чувствую себя энергичным(ой) и эмоционально воодушевленным(ой).',
                          'При разговоре с агрессивными учениками я умею находить нужные слова, снижающие их агрессию.',
                          'Я чувствую угнетенность и апатию.',
                          'Мне нравится успокаивать недоверчивых учеников и помогать им.',
                          'В последнее время я стал(а) более черствым(ой) (бесчувственным) по отношению к ученикам.',
                          'Ученики, с которыми мне приходится работать, не интересны для меня. Они скорее утомляют, чем радуют меня.',
                          'У меня много планов на будущее, и я верю в их осуществление.',
                          'У меня все больше жизненных разочарований.',
                          'Я чувствую равнодушие и потерю интереса ко многому, что радовало меня раньше.',
                          'Мне безразлично, что думают и чувствуют ученики. Я предпочитаю формальное, без лишних эмоций общение с ними.',
                          'Мне хочется уединиться и отдохнуть от всего и всех.',
                          'Я легко могу создать атмосферу доброжелательности и доверия на уроке.',
                          'Я разговариваю без напряжения с любым учеником или родителем (независимо от их амбиций, эмоционального состояния и культуры общения).',
                          'Я доволен (довольна) своими жизненными успехами (достижениями).',
                          'Я чувствую себя на пределе возможностей.',
                          'Я смогу еще много сделать в своей жизни.',
                          'Я проявляю к другим людям больше внимания и заботы, чем получаю от них в ответ признательности и благодарности.',
                          ]
        # Проверяем порядок колонок
        order_main_columns = lst_check_cols  # порядок колонок и названий как должно быть
        order_temp_df_columns = list(answers_df.columns)  # порядок колонок проверяемого файла
        error_order_lst = []  # список для несовпадающих пар
        # Сравниваем попарно колонки
        for main, temp in zip(order_main_columns, order_temp_df_columns):
            if main != temp:
                error_order_lst.append(f'На месте колонки {main} находится колонка {temp}')
                error_order_message = ';'.join(error_order_lst)
        if len(error_order_lst) != 0:
            print(error_order_message)
            raise BadOrderVODPB


        # словарь для замены слов на числа
        dct_replace_value = {'никогда': 0,
                             'очень редко': 1,
                             'редко': 2,
                             'иногда': 3,
                             'часто': 4,
                             'очень часто': 5,
                             'ежедневно': 6}

        valid_values = [0,1, 2, 3, 4, 5, 6]
        answers_df.replace(dct_replace_value, inplace=True)  # заменяем слова на цифры для подсчетов
        # Проверяем, есть ли значения, отличающиеся от указанных в списке
        lst_error_answers = []  # список для хранения строк где найдены неправильные ответы

        for i in range(22):
            mask = ~answers_df.iloc[:, i].isin(valid_values)  # проверяем на допустимые значения
            result_check = answers_df.iloc[:, i][mask]
            if len(result_check) != 0:
                error_row = list(map(lambda x: x + 2, result_check.index))
                error_row = list(map(str, error_row))
                error_row_lst = [f'В {i + 1} вопросной колонке на строке {value}' for value in error_row]
                error_in_column = ','.join(error_row_lst)
                lst_error_answers.append(error_in_column)

        if len(lst_error_answers) != 0:
            error_message = ';'.join(lst_error_answers)
            raise BadValueVODPB


















    elif len(lst_svod_cols) == 1:
        pass
    else:
        pass

