""""
Скрипт для обработки теста Карта интересов Голомштока в редакции Азбеля
"""
import pandas as pd
import re
from tkinter import messagebox
from lachesis_support_functions import round_mean,create_union_svod,calc_count_scale


class BadOrderMIGA(Exception):
    """
    Исключение для обработки случая когда колонки не совпадают
    """
    pass


class BadValueMIGA(Exception):
    """
    Исключение для неправильных значений в вариантах ответов
    """
    pass


class BadCountColumnsMIGA(Exception):
    """
    Исключение для обработки случая если количество колонок не равно 144
    """
    pass

def calc_level_miga(value):
    """
    Функция для подсчета уровня склонности к то или иной сфере
    """
    if -12 <= value <= -6:
        return 'область деятельности активно отрицается'
    elif -5 <= value <= 0:
        return 'область деятельности интереса не вызывает'
    elif 1 <= value <= 4:
        return 'интерес выражен слабо'
    elif 5 <= value <= 7:
        return 'выраженный интерес'
    elif 8 <= value <= 12:
        return 'ярко выраженный интерес'


def extract_key_max_value(cell:str) ->str:
    """
    Функция для извлечения ключа с максимальным значением
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return cell
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return max(dct_result, key=dct_result.get)

def extract_max_value(cell:str):
    """
    Функция для извлечения значения ключа с максимальным значением , ха звучит странно
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return 0
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return dct_result[max(dct_result, key=dct_result.get)]


def processing_result_miga(row):
    """
    Обработка результатов тестирования
    """
    dct_cols = {'Биология': [1, 25, 49, 73, 97, 121],
                'Физика': [2, 26, 50, 74, 98, 122],
                'Химия':[3,27,51,75,99,123],
                'География':[4,28,52,76,100,124],
                'Медицина':[5,29,53,77,101,125],
                'Техника и электроника':[6,30,54,78,102,126],
                'Строительство':[7,31,55,79,103,127],
                'Математика':[8,32,56,80,104,128],
                'Экономика':[9,33,57,81,105,129],
                'Иностранные языки':[10,34,58,82,106,130],
                'Транспорт':[11,35,59,83,107,131],
                'Авиация, морское дело':[12,36,60,84,108,132],
                'Военные специальности':[13,37,61,85,109,133],
                'История':[14,38,62,86,110,134],
                'Рабочие специальности':[15,39,63,87,111,135],
                'Журналистика':[16,40,64,88,112,136],
                'Юриспруденция':[17,41,65,89,113,137],
                'Педагогика':[18,42,66,90,114,138],
                'Сфера обслуживания, торговля':[19,43,67,91,115,139],
                'Физкультура и спорт':[20,44,68,92,116,140],
                'Музыка':[21,45,69,93,117,141],
                'Сценическое искусство':[22,46,70,94,118,142],
                'Изобразительное искусство':[23,47,71,95,119,143],
                'Экология':[24,48,72,96,120,144],
                }

    dct_answers = dict() # словарь для результатов

    for key, ind_cols in dct_cols.items():
        prepared_lst = list(map(lambda x:x-1,ind_cols))
        total = sum(row[i] for i in prepared_lst) # получаем сумму выбранных колонок
        dct_answers[key] = total

    result_lst = sorted(dct_answers.items(), key=lambda t: t[1], reverse=True)
    begin_str = '\n'
    # создаем строку с результатами
    for sphere, value in result_lst:
        begin_str += f'{sphere}: {value};\n'

    return begin_str

def create_result_golomshtok_azbel_map_interest(base_df:pd.DataFrame, out_dct:dict, lst_svod_cols:list):
    """
    Функция для подсчета результата если указаны колонки по которым нужно провести свод
    :param df: датафрейм с результатами
    :param out_dct: словарь с уже подсчитанными базовыми данными
    :param lst_svod_cols: список сводных колонок
    :return: словарь
    """
    lst_level = ['область деятельности активно отрицается', 'область деятельности интереса не вызывает',
                 'интерес выражен слабо',
                 'выраженный интерес', 'ярко выраженный интерес'
                 ]

    lst_sphere = ['Биология', 'Физика', 'Химия', 'География',
                  'Медицина', 'Техника и электроника', 'Строительство', 'Математика',
                  'Экономика', 'Иностранные языки', 'Транспорт', 'Авиация, морское дело',
                  'Военные специальности', 'История', 'Рабочие специальности', 'Журналистика',
                  'Юриспруденция', 'Педагогика', 'Сфера обслуживания, торговля', 'Физкультура и спорт',
                  'Музыка', 'Сценическое искусство', 'Изобразительное искусство', 'Экология',
                  ]

    lst_reindex_one_level_cols = lst_svod_cols.copy()
    lst_reindex_one_level_cols.extend( ['область деятельности активно отрицается', 'область деятельности интереса не вызывает',
             'интерес выражен слабо',
             'выраженный интерес', 'ярко выраженный интерес',
                                                      'Итого'])

    lst_reindex_one_sphere_cols = lst_svod_cols.copy()
    lst_reindex_one_sphere_cols.extend( ['Биология', 'Физика', 'Химия', 'География',
              'Медицина', 'Техника и электроника', 'Строительство', 'Математика',
              'Экономика', 'Иностранные языки', 'Транспорт', 'Авиация, морское дело',
              'Военные специальности', 'История', 'Рабочие специальности', 'Журналистика',
              'Юриспруденция', 'Педагогика', 'Сфера обслуживания, торговля', 'Физкультура и спорт',
              'Музыка', 'Сценическое искусство', 'Изобразительное искусство', 'Экология','Итого'])

    svod_count_one_level_df = calc_count_scale(base_df, lst_svod_cols,
                                               'Значение_ведущего_интереса',
                                               'Уровень_выраженности',
                                               lst_reindex_one_level_cols, lst_level)

    svod_count_one_sphere_df = calc_count_scale(base_df, lst_svod_cols,
                                                'Значение_ведущего_интереса',
                                                'Ведущий_интерес',
                                                lst_reindex_one_sphere_cols, lst_sphere)

    # Считаем среднее по субшкалам
    svod_mean_one_df = pd.pivot_table(base_df,
                                      index=lst_svod_cols,
                                      values=['Значение_ведущего_интереса',
                                              ],
                                      aggfunc=round_mean)
    svod_mean_one_df.reset_index(inplace=True)
    # упорядочиваем колонки
    new_order_cols = lst_svod_cols.copy()
    new_order_cols.extend((['Значение_ведущего_интереса',
                            ]))
    svod_mean_one_df = svod_mean_one_df.reindex(columns=new_order_cols)

    dct_rename_cols_mean = {'Значение_ведущего_интереса': 'Среднее значение ведущего интереса',
                            }
    svod_mean_one_df.rename(columns=dct_rename_cols_mean, inplace=True)

    # очищаем название колонки по которой делали свод
    out_name_lst = []

    for name_col in lst_svod_cols:
        name = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_col)
        if len(lst_svod_cols) == 1:
            out_name_lst.append(name[:14])
        elif len(lst_svod_cols) == 2:
            out_name_lst.append(name[:7])
        else:
            out_name_lst.append(name[:4])

    out_name = ' '.join(out_name_lst)
    if len(out_name) > 14:
        out_name = out_name[:14]

    out_dct.update({f'Ср {out_name}': svod_mean_one_df,
                    f'Уровень {out_name}': svod_count_one_level_df,
                    f'Интерес {out_name}': svod_count_one_sphere_df,
                    })

    if len(lst_svod_cols) == 1:
        return out_dct
    else:
        for idx, name_column in enumerate(lst_svod_cols):
            lst_reindex_column_level_cols = [lst_svod_cols[idx], 'область деятельности активно отрицается', 'область деятельности интереса не вызывает',
             'интерес выражен слабо',
             'выраженный интерес', 'ярко выраженный интерес',
                                             'Итого']

            lst_reindex_column_sphere_cols = [lst_svod_cols[idx], 'Биология', 'Физика', 'Химия', 'География',
              'Медицина', 'Техника и электроника', 'Строительство', 'Математика',
              'Экономика', 'Иностранные языки', 'Транспорт', 'Авиация, морское дело',
              'Военные специальности', 'История', 'Рабочие специальности', 'Журналистика',
              'Юриспруденция', 'Педагогика', 'Сфера обслуживания, торговля', 'Физкультура и спорт',
              'Музыка', 'Сценическое искусство', 'Изобразительное искусство', 'Экология','Итого']

            svod_count_column_level_df = calc_count_scale(base_df, lst_svod_cols[idx],
                                                          'Значение_ведущего_интереса',
                                                          'Уровень_выраженности',
                                                          lst_reindex_column_level_cols, lst_level)

            svod_count_column_sphere_df = calc_count_scale(base_df, lst_svod_cols[idx],
                                                           'Значение_ведущего_интереса',
                                                           'Ведущий_интерес',
                                                           lst_reindex_column_sphere_cols, lst_sphere)

            # Считаем среднее по субшкалам
            svod_mean_column_df = pd.pivot_table(base_df,
                                                 index=[lst_svod_cols[idx]],
                                                 values=['Значение_ведущего_интереса',
                                                         ],
                                                 aggfunc=round_mean)
            svod_mean_column_df.reset_index(inplace=True)
            # упорядочиваем колонки
            new_order_cols = [lst_svod_cols[idx]].copy()
            new_order_cols.extend((['Значение_ведущего_интереса',
                                    ]))
            svod_mean_column_df = svod_mean_column_df.reindex(columns=new_order_cols)

            dct_rename_cols_mean = {'Значение_ведущего_интереса': 'Среднее значение ведущего интереса',
                                    }
            svod_mean_column_df.rename(columns=dct_rename_cols_mean, inplace=True)


            name_column = lst_svod_cols[idx]
            name_column = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_column)
            name_column = name_column[:15]

            out_dct.update({f'Ср {name_column}': svod_mean_column_df,
                            f'Уровень {name_column}': svod_count_column_level_df,
                            f'Интерес {name_column}': svod_count_column_sphere_df,
                            })
        return out_dct




def processing_gol_azb_map_interest(base_df: pd.DataFrame, answers_df: pd.DataFrame,lst_svod_cols:list):
    """
    Функция для обработки
    :param base_df: часть датафрейма с описательными колонками
    :param answers_df: часть датафрейма с ответами
    :param lst_svod_cols:  список с колонками по которым нужно делать свод
    """
    try:
        out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами
        if len(answers_df.columns) != 144:
            raise BadCountColumnsMIGA

        # очищаем названия колонок от возможных сочетаний .1 которые добавляет пандас при одинаковых колонках
        clean_df_lst = []
        for name_column in answers_df.columns:
            clean_name = re.sub(r'.\d+$', '', name_column)
            clean_df_lst.append(clean_name)

        answers_df.columns = clean_df_lst




        lst_check_cols = ['Изучать разнообразие животного и растительного мира', 'Проводить физические эксперименты',
                          'Разрабатывать новые технологии химического синтеза', 'Изучать месторождения полезных ископаемых',
                          'Разрабатывать новые методы диагностики и лечения различных болезней',
                          'Устанавливать и налаживать работу компьютерных программ',
                          'Следить за последовательностью и технологиями строительных работ',
                          'Решать задачки из книг типа «Математические игры», «Занимательная математика»',
                          'Планировать финансовую и производственную деятельность предприятия, фирмы',
                          'Помогать делать переводы документации',
                          'Управлять машиной, автобусом, трейлером и т. д.',
                          'Заниматься в секции парашютистов, в авиаклубе или заниматься в секции яхтсменов, аквалангистов',
                          'Заниматься в стрелковой секции',
                          'Заниматься в историческом клубе, разыгрывать ролевые игры по сюжетам исторических событий',
                          'Изучать устройство и режимы работы станков',
                          'Писать статьи, фельетоны, очерки в периодические издания и в Интернет',
                          'Оказывать юридическую помощь людям, консультируя их по вопросам законодательства',
                          'Организовывать для ребят игры и праздники',
                          'Консультировать людей при крупных покупках (автомобиль, заграничный тур и т. д.)',
                          'Тренировать команду спортсменов',
                          'Работать на музыкальных радиоканалах, составлять списки внесен для звучания в эфире',
                          'Сниматься в кино или играть на сцене',
                          'Делать интернет-сайты, веб-страницы',
                          'Разрабатывать мероприятия по охране численности редких растений и животных',
                          'Участвовать в биологических экспедициях, посещать биологические секции',
                          'Изучать законы природы, находить физические закономерности',
                          'Проводить опыты с различными веществами, следить за ходом химических реакций',
                          'Вести наблюдения за изменениями состояния атмосферы',
                          'Читать о том, как люди учились бороться с болезнями и изобретали новые лекарства',
                          'Находить и устранять причины сбоя в компьютерах, аппаратуре, приборах',
                          'Набрасывать эскизы или выполнять чертежи различных построек',
                          'Соревноваться в решении математических задач',
                          'Выступать посредником при заключении торговых сделок (искать покупателям продавцов и наоборот)',
                          'Проводить экскурсии на иностранном языке для гостей нашего города',
                          'Управлять пожарной машиной', 'Управлять самолетом МЧС или скоростным катером',
                          'Участвовать в военизированных учениях («Зарница», «Разведчик» и др.)',
                          'Посещать исторические музеи, изучать исторические памятники разных народов',
                          'Регулировать механизмы и заменять их в случае неисправности',
                          'Наблюдать и анализировать события, поступки людей, делать об этом репортажи',
                          'Искать и фиксировать следы на месте преступления',
                          'Заниматься репетиторством и преподавательской деятельностью',
                          'Изучать спрос покупателей на определенный товар',
                          'Читать специальные спортивные новости в газетах и на сайтах',
                          'Исполнять произведения на музыкальных инструментах с использованием различных техник игры',
                          'Изучать основы сценического искусства, творчество знаменитых мастеров сцены',
                          'Искать наиболее рациональное и эстетическое цветовое решение для интерьеров',
                          'Проводить наблюдения и контроль загрязнения окружающей среды',
                          'Изучать анатомию и физиологию животных',
                          'Собирать установки для проведения физических экспериментов',
                          'В лабораторных условиях определять степень загрязненности почвы химическими веществами',
                          'Создавать ландшафтные карты с помощью компьютерных геоинформационных систем',
                          'Интересоваться причинами и способами лечения болезни',
                          'Прокладывать сетевые кабели и кабели силового питания',
                          'Изучать новые технологии строительства', 'Изучать языки программирования на компьютере',
                          'Осуществлять финансовые расчеты между предприятиями',
                          'Читать литературу на иностранном языке или смотреть фильмы без перевода',
                          'Управлять современным поездом дальнего следования',
                          'Оказывать экстренную помощь людям на терпящих бедствие судах',
                          'Быть военным инженером или командиром',
                          'Обсуждать исторические и текущие политические события России и других стран',
                          'Подбирать цветовые оттенки, красить дома, расписывать стены',
                          'Добывать эксклюзивную информацию, передавать ее читателям и зрителям',
                          'Контролировать своевременную уплату налогов фирмами и физическими лицами',
                          'Обучать маленьких детей, играя с ними',
                          'Встречать и размещать пассажиров в салоне самолета',
                          'Тренироваться в профессиональном спортивном клубе',
                          'Играть в музыкальной группе или в оркестре, следуя указаниям дирижера',
                          'Вести концертные программы, объявлять зрителям новые номера программы',
                          'Создавать необычные модели одежды',
                          'Разрабатывать меры по снижению количества вредных производственных выбросов в окружающую среду',
                          'Разрабатывать средства борьбы с возбудителями заболеваний животных и растений',
                          'Изучать процессы взаимодействия элементарных частиц в ядерных реакторах',
                          'Брать на анализ химические пробы воды, продуктов питания, почвы и пр.',
                          'Вести разведку месторождений полезных ископаемых: нефти, газа, драгоценных металлов и др.',
                          'Тренироваться в навыках первой медицинской помощи',
                          'Проверять, испытывать, регулировать работу узлов автомобиля, самолета, корабля и т. д.',
                          'Готовить растворы, смеси для строительных работ',
                          'Разрабатывать программные алгоритмы для выполнения сложных расчетов',
                          'Вести финансовую документацию фирмы, предприятия', 'Изучать иностранные языки',
                          'Регулировать движение транспортных потоков на улицах города',
                          'Оказывать экстренную помощь людям «с воздуха» (например, управляя вертолетом МЧС)',
                          'Изучать устройство оружия, военной техники', 'Анализировать по книгам исторические факты',
                          'Обеспечивать в домах систему отопления, исправную работу водопровода',
                          'Редактировать тексты книг, статей, выступлений высокопоставленных лиц',
                          'Выдвигать обвинения преступникам, назначать им наказания в соответствии с законом',
                          'Готовить школьников к олимпиадным заданиям, конкурсам',
                          'Помогать подбирать людям наряды и украшения для торжественных церемоний',
                          'Сдавать спортивные нормативы',
                          'Выступать в качестве солиста перед публикой на концертах, в клубах',
                          'Подбирать актеров для съемки художественного фильма или рекламного клипа',
                          'Делать фотоснимки, монтировать фотографии с помощью компьютера',
                          'Заниматься мониторингом состояния воздуха на оживленных городских магистралях',
                          'Отбирать и заготавливать семена для посадки, высаживать растения в зимних садах',
                          'Моделировать на компьютере физические законы природы',
                          'Создавать новые синтетические вещества из нефтепродуктов и других полезных ископаемых',
                          'Изучать особенности флоры и фауны различных регионов',
                          'Осуществлять уход за человеком во время его выздоровления после болезни',
                          'Заниматься в технической или электротехнической секции (на пример, в авиа- или судомоделировании)',
                          'Изучать качества и условия применения строительных материалов',
                          'Писать компьютерные программы на основе анализа математических алгоритмов',
                          'Рассчитывать предполагаемый размер прибыли предприятия',
                          'Осуществлять перевод телепередач на русский язык',
                          'Консультировать людей по соблюдению правил дорожного движения',
                          'Изучать особенности управления яхтой в штормовую погоду',
                          'Предупреждать незаконное пересечение государственной границы иностранными гражданами',
                          'Разыскивать и собирать материалы, свидетельствующие о событиях прошлого',
                          'Обрабатывать и изготовлять металлические детали на фрезерном станке',
                          'Работать в средствах массовой информации, вести телепередачи',
                          'Выяснять у людей причины незаконных поступков, которые они скрывают',
                          'Организовывать походы для школьников',
                          'Разрабатывать рекламные акции для продвижения товара в магазинах города',
                          'Ездить в качестве участника на спортивные соревнования в другой город',
                          'Сочинять музыку для кинофильмов, телепередач, для известных исполнителей',
                          'Подготавливать и ставить трюки в кино',
                          'Придумывать оригинальные ювелирные изделия, украшения',
                          'Изучать взаимоотношения живых организмов с их средой обитания',
                          'Заниматься дрессировкой служебных собак или других животных',
                          'Читать книги тина «Занимательная физика», «Физики шутят» и т. п.',
                          'Управлять технологическими процессами производства лекарств',
                          'Участвовать в географических экспедициях',
                          'Работать врачом на станции «Скорой помощи»', 'Ремонтировать радиоприборы и различную аппаратуру',
                          'Продумывать планировку домов, этажей, квартир. Намечать план строительства',
                          'Отражать в виде чисел и формул какие-либо события, процессы или явления',
                          'Заключать сделки, договора на выполнение определенных работ',
                          'Изучать происхождение слов и различных словосочетаний в разных языках',
                          'Тренироваться водить машину или мотоцикл для подготовки к гонке',
                          'Изучать особенности управления легким самолетом в ветреную погоду',
                          'Жить согласно уставу, носить военную форму',
                          'Участвовать в археологических экспедициях, работать на раскопках',
                          'Делать из дерева различные предметы, мебель и пр.',
                          'Осуществлять литературную обработку статей в соответствии с жанровым своеобразием',
                          'Продумывать новые законы и поправки в кодексы, которые были бы удобны для применения',
                          'Руководить одной из секций в доме детского творчества',
                          'Помогать человеку улучшить внешность с помощью прически, макияжа, подбора красивой одежды и т. п.',
                          'Осуществлять честное и грамотное судейство на спортивных соревнованиях',
                          'Изучать творчество выдающихся композиторов, поэтов песен и исполнителей',
                          'Создавать творческие проекты, «раскручивать» исполнителей',
                          'Заниматься дизайном интерьеров',
                          'Следить за качеством воды, поступающей в городскую водопроводную сеть'
                          ]

        # Проверяем порядок колонок
        order_main_columns = lst_check_cols  # порядок колонок и названий как должно быть
        order_temp_df_columns = list(answers_df.columns)  # порядок колонок проверяемого файла
        error_order_lst = []  # список для несовпадающих пар
        # Сравниваем попарно колонки
        for main, temp in zip(order_main_columns, order_temp_df_columns):
            if main != temp:
                error_order_lst.append(f'На месте колонки {main} находится колонка {temp}')
                error_order_message = ';'.join(error_order_lst)
        if len(error_order_lst) != 0:
            raise BadOrderMIGA

        # словарь для замены слов на числа
        dct_replace_value = {'очень хотелось бы, нравится этим заниматься': 2,
                             'нравится, но не очень сильно': 1,
                             'затрудняюсь ответить': 0,
                             'не хотелось бы, не нравится': -1,
                             'очень не хотелось бы, совершенно не нравится': -2}

        valid_values = [-2, -1, 0, 1, 2]
        answers_df.replace(dct_replace_value, inplace=True)  # заменяем слова на цифры для подсчетов

        # Проверяем, есть ли значения, отличающиеся от указанных в списке
        lst_error_answers = []  # список для хранения строк где найдены неправильные ответы

        for i in range(144):
            mask = ~answers_df.iloc[:, i].isin(valid_values)  # проверяем на допустимые значения
            result_check = answers_df.iloc[:, i][mask]
            if len(result_check) != 0:
                error_row = list(map(lambda x: x + 2, result_check.index))
                error_row = list(map(str, error_row))
                error_row_lst = [f'В {i + 1} вопросной колонке на строке {value}' for value in error_row]
                error_in_column = ','.join(error_row_lst)
                lst_error_answers.append(error_in_column)

        if len(lst_error_answers) != 0:
            error_message = ';'.join(lst_error_answers)
            raise BadValueMIGA

        base_df[f'Распределение'] = answers_df.apply(processing_result_miga, axis=1)
        base_df[f'Ведущий_интерес'] = base_df[f'Распределение'].apply(
            extract_key_max_value)
        base_df[f'Значение_ведущего_интереса'] = base_df[f'Распределение'].apply(
            extract_max_value)
        base_df[f'Уровень_выраженности'] = base_df[f'Значение_ведущего_интереса'].apply(
            calc_level_miga)

        # Создаем датафрейм для создания части в общий датафрейм
        part_df = pd.DataFrame()
        part_df['КИГА_Распределение'] = base_df['Распределение']
        part_df['КИГА_Ведущий_интерес'] = base_df['Ведущий_интерес']
        part_df['КИГА_Интерес_Значение'] = base_df['Значение_ведущего_интереса']
        part_df['КИГА_Интерес_Уровень'] = base_df['Уровень_выраженности']

        # Создаем строку с описанием
        description_result = """
        Шкала оценки результатов
        от -12 до -6 баллов – сфера деятельности активно отрицается («Что угодно, только не это!»);;
        от-5 до 0 баллов – область деятельности интереса не вызывает;
        от 1 до 4 баллов – интерес выражен слабо;
        от 5 до 7 баллов – выраженный интерес;
        от 8 до 12 баллов – ярко выраженный интерес.\n
                """

        # создаем описание результата
        base_df[f'Описание_результата'] = 'Карта интересов Голомшток.\n' + 'Результат тестирования:\n' + description_result + \
                                      base_df[
                                          f'Распределение']
        part_df['КИГА_Описание_результата'] = base_df[f'Описание_результата']

        base_df.sort_values(by='Значение_ведущего_интереса', ascending=False, inplace=True)  # сортируем
        out_answer_df = pd.concat([out_answer_df, answers_df], axis=1)  # Датафрейм для проверки

        # Делаем свод по уровню
        dct_svod_level = {'Значение_ведущего_интереса': 'Уровень_выраженности',
                          }
        dct_rename_svod_level = {'Значение_ведущего_интереса': 'Количество',
                                 }
        # Списки для шкал
        lst_level = ['область деятельности активно отрицается', 'область деятельности интереса не вызывает',
                     'интерес выражен слабо',
                     'выраженный интерес','ярко выраженный интерес'
                     ]
        base_svod_level_df = create_union_svod(base_df, dct_svod_level, dct_rename_svod_level, lst_level)

        # Делаем свод по сфере
        dct_svod_sphere = {'Значение_ведущего_интереса': 'Ведущий_интерес',
                           }

        dct_rename_svod_sphere = {'Значение_ведущего_интереса': 'Количество',
                                  }

        # Списки для шкал
        lst_sphere = ['Биология', 'Физика', 'Химия','География',
                      'Медицина','Техника и электроника','Строительство','Математика',
                      'Экономика','Иностранные языки','Транспорт','Авиация, морское дело',
                      'Военные специальности','История','Рабочие специальности','Журналистика',
                      'Юриспруденция','Педагогика','Сфера обслуживания, торговля','Физкультура и спорт',
                      'Музыка','Сценическое искусство','Изобразительное искусство','Экология',
                      ]

        base_svod_sphere_df = create_union_svod(base_df, dct_svod_sphere, dct_rename_svod_sphere, lst_sphere)

        # считаем среднее значение
        avg_main = round(base_df['Значение_ведущего_интереса'].mean(), 2)

        avg_dct = {'Среднее значение Ведущий интерес': avg_main,
                   }

        avg_df = pd.DataFrame.from_dict(avg_dct, orient='index')
        avg_df = avg_df.reset_index()
        avg_df.columns = ['Показатель', 'Среднее значение']

        # формируем основной словарь
        out_dct = {'Списочный результат': base_df, 'Список для проверки': out_answer_df,
                   'Среднее': avg_df,
                   'Свод по уровням': base_svod_level_df,
                   }

        # Листы по уровням
        dct_level = dict()
        for level in lst_level:
            temp_df = base_df[base_df['Уровень_выраженности'] == level]
            if temp_df.shape[0] != 0:
                if level == 'область деятельности активно отрицается':
                    level = 'отрицается'
                elif level == 'область деятельности интереса не вызывает':
                    level = 'нет интереса'
                elif level == 'интерес выражен слабо':
                    level = 'выражен слабо'
                elif level == 'ярко выраженный интерес':
                    level = 'ярко выражен'
                dct_level[level] = temp_df
        out_dct.update(dct_level)

        # Добавляем свод по сферам
        out_dct.update({
            'Свод по интересам': base_svod_sphere_df,
        })
        # Листы по сферам
        dct_sphere = dict()
        for sphere in lst_sphere:
            temp_df = base_df[base_df['Ведущий_интерес'] == sphere]
            if temp_df.shape[0] != 0:
                if sphere == 'сфера работы с людьми':
                    sphere = 'работа с людьми'
                elif sphere == 'сфера умственного труда':
                    sphere = 'умственный труд'
                elif sphere == 'сфера технических интересов':
                    sphere = 'технические интересы'
                elif sphere == 'сфера эстетики и искусства':
                    sphere = 'эстетика и искусство'
                elif sphere == 'сфера физического труда, подвижной деятельности':
                    sphere = 'физический труд'
                elif sphere == 'сфера материальных интересов, планово-экономических видов работ':
                    sphere = 'материальные интересы'

                dct_sphere[sphere] = temp_df
        out_dct.update(dct_sphere)

        """
                          Сохраняем в зависимости от необходимости делать своды по определенным колонкам
                          """
        if len(lst_svod_cols) == 0:
            return out_dct, part_df
        else:
            out_dct = create_result_golomshtok_azbel_map_interest(base_df, out_dct, lst_svod_cols)

            return out_dct, part_df


    except BadOrderMIGA:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Карта интересов Голомшток Азбель обнаружены неправильные вопросы. Проверьте названия колонок с вопросами:\n'
                             f'{error_order_message}\n'
                             f'Используйте при создании Яндекс-формы написание вопросов из руководства пользователя программы Лахесис.')
    except BadValueMIGA:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Карта интересов Голомшток Азбель обнаружены неправильные варианты ответов. Проверьте ответы на указанных строках:\n'
                             f'{error_message}\n'
                             f'Используйте при создании Яндекс-формы написание вариантов ответа из руководства пользователя программы Лахесис.')


    except BadCountColumnsMIGA:
        messagebox.showerror('Лахеcис',
                             f'Проверьте количество колонок с ответами на тест Карта интересов Голомшток Азбель\n'
                             f'Должно быть 144 колонки с ответами')








