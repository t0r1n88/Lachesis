"""
Скрипт для обработки теста Характер и профессия Резапкина
"""

import pandas as pd
import re
from tkinter import messagebox
from lachesis_support_functions import round_mean, create_union_svod,calc_count_scale


class BadOrderHPR(Exception):
    """
    Исключение для обработки случая когда колонки не совпадают
    """
    pass




class BadValueHPR(Exception):
    """
    Исключение для неправильных значений в вариантах ответов
    """
    pass


class BadCountColumnsHPR(Exception):
    """
    Исключение для обработки случая если количество колонок не равно 24
    """
    pass

def extract_key_max_value(cell:str) ->str:
    """
    Функция для извлечения ключа с максимальным значением
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return cell
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return max(dct_result, key=dct_result.get)

def extract_max_value(cell:str):
    """
    Функция для извлечения значения ключа с максимальным значением , ха звучит странно
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return 0
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return dct_result[max(dct_result, key=dct_result.get)]

def processing_result_hpr(row):
    """
    Обработка результатов тестирования
    """

    # Создаем словарь для хранения данных
    dct_type = {'демонстративный тип': 0,
                'тревожный тип': 0,
                'эмотивный тип': 0,
                'целеустремленный тип': 0,
                'педантичный тип': 0,
                'гипертимный тип': 0,
                'импульсивный тип': 0,
                'оригинальный тип': 0,
                }

    # 1
    if row[0] == 'часто':
        dct_type['демонстративный тип'] += 1
    elif row[0] == 'редко':
        dct_type['эмотивный тип'] += 1
    elif row[0] == 'нет, потому что записываю их':
        dct_type['педантичный тип'] += 1
    elif row[0] == 'я не думаю об этом':
        dct_type['импульсивный тип'] += 1

    # 2
    if row[1] == 'душевные':
        dct_type['эмотивный тип'] += 1
    elif row[1] == 'ответственные':
        dct_type['целеустремленный тип'] += 1
    elif row[1] == 'жизнерадостные':
        dct_type['гипертимный тип'] += 1
    elif row[1] == 'дисциплинированные':
        dct_type['импульсивный тип'] += 1

    # 3
    if row[2] == 'я люблю быть в центре внимания':
        dct_type['демонстративный тип'] += 1
    elif row[2] == 'я чувствую себя неуютно':
        dct_type['тревожный тип'] += 1
    elif row[2] == 'я обычно скучаю':
        dct_type['педантичный тип'] += 1
    elif row[2] == 'я с трудом подыскиваю тему для разговора':
        dct_type['оригинальный тип'] += 1

    # 4
    if row[3] == 'возможность показать себя и свои способности':
        dct_type['демонстративный тип'] += 1
    elif row[3] == 'большой стресс':
        dct_type['тревожный тип'] += 1
    elif row[3] == 'донести до слушателей свои идеи':
        dct_type['целеустремленный тип'] += 1
    elif row[3] == 'форма общения':
        dct_type['гипертимный тип'] += 1

    # 5
    if row[4] == 'отсутствие конфликтов':
        dct_type['тревожный тип'] += 1
    elif row[4] == 'работа на результат':
        dct_type['целеустремленный тип'] += 1
    elif row[4] == 'дисциплина':
        dct_type['педантичный тип'] += 1
    elif row[4] == 'возможность работать творчески':
        dct_type['оригинальный тип'] += 1

    # 6
    if row[5] == 'с доброжелательным интересом':
        dct_type['эмотивный тип'] += 1
    elif row[5] == 'как потенциального союзника':
        dct_type['гипертимный тип'] += 1
    elif row[5] == 'как потенциального соперника':
        dct_type['импульсивный тип'] += 1
    elif row[5] == 'нейтрально':
        dct_type['оригинальный тип'] += 1

    # 7
    if row[6] == 'самую модную вещь':
        dct_type['демонстративный тип'] += 1
    elif row[6] == 'что-нибудь неброское':
        dct_type['тревожный тип'] += 1
    elif row[6] == 'классический костюм':
        dct_type['целеустремленный тип'] += 1
    elif row[6] == 'удобную и практичную одежду':
        dct_type['импульсивный тип'] += 1

    # 8
    if row[7] == 'мелодрама':
        dct_type['эмотивный тип'] += 1
    elif row[7] == 'документальное кино':
        dct_type['педантичный тип'] += 1
    elif row[7] == 'боевик':
        dct_type['импульсивный тип'] += 1
    elif row[7] == 'фэнтези':
        dct_type['оригинальный тип'] += 1

    # 9
    if row[8] == 'в какой-нибудь экзотической стране':
        dct_type['демонстративный тип'] += 1
    elif row[8] == 'в тихом, уединенном месте':
        dct_type['тревожный тип'] += 1
    elif row[8] == 'вместе с близкими людьми':
        dct_type['эмотивный тип'] += 1
    elif row[8] == 'путешествуя в компании друзей':
        dct_type['гипертимный тип'] += 1

    # 10
    if row[9] == 'на себя':
        dct_type['демонстративный тип'] += 1
    elif row[9] == 'на других людей':
        dct_type['эмотивный тип'] += 1
    elif row[9] == 'на работу, учебу':
        dct_type['целеустремленный тип'] += 1
    elif row[9] == 'на развлечения':
        dct_type['гипертимный тип'] += 1

    # 11
    if row[10] == 'долго не могу ничего выбрать из массы товаров':
        dct_type['тревожный тип'] += 1
    elif row[10] == 'точно знаю, что должен купить':
        dct_type['целеустремленный тип'] += 1
    elif row[10] == 'сравниваю и оцениваю товар, прежде чем сделать покупку':
        dct_type['педантичный тип'] += 1
    elif row[10] == 'беру то, что попадается под руку':
        dct_type['оригинальный тип'] += 1

    # 12
    if row[11] == 'приумножал бы свое богатство':
        dct_type['педантичный тип'] += 1
    elif row[11] == 'ни в чем бы себе не отказывал':
        dct_type['гипертимный тип'] += 1
    elif row[11] == 'не стал бы сорить деньгами':
        dct_type['импульсивный тип'] += 1
    elif row[11] == 'поддерживал бы проекты, связанные с наукой или искусством':
        dct_type['оригинальный тип'] += 1

    # 13
    if row[12] == 'общаться с известными людьми':
        dct_type['демонстративный тип'] += 1
    elif row[12] == 'ни за что не отвечать':
        dct_type['тревожный тип'] += 1
    elif row[12] == 'принимать ответственные решения':
        dct_type['целеустремленный тип'] += 1
    elif row[12] == 'решать творческие задачи':
        dct_type['оригинальный тип'] += 1

    # 14
    if row[13] == 'способности сопереживать людям':
        dct_type['эмотивный тип'] += 1
    elif row[13] == 'точности и аккуратности в ведении дел':
        dct_type['педантичный тип'] += 1
    elif row[13] == 'навыков общения с разными людьми':
        dct_type['гипертимный тип'] += 1
    elif row[13] == 'силы и решительности':
        dct_type['импульсивный тип'] += 1

    # 15
    if row[14] == 'Лучшее – враг хорошего':
        dct_type['тревожный тип'] += 1
    elif row[14] == 'Цель оправдывает средства':
        dct_type['целеустремленный тип'] += 1
    elif row[14] == 'Доверяй, но проверяй':
        dct_type['педантичный тип'] += 1
    elif row[14] == 'Хочешь жить – умей вертеться':
        dct_type['гипертимный тип'] += 1

    # 16
    if row[15] == 'аниматора':
        dct_type['демонстративный тип'] += 1
    elif row[15] == 'врача':
        dct_type['эмотивный тип'] += 1
    elif row[15] == 'военного':
        dct_type['импульсивный тип'] += 1
    elif row[15] == 'ученого':
        dct_type['оригинальный тип'] += 1

    # 17
    if row[16] == 'идеальным исполнителем':
        dct_type['тревожный тип'] += 1
    elif row[16] == 'хорошим организатором':
        dct_type['целеустремленный тип'] += 1
    elif row[16] == 'душой компании':
        dct_type['гипертимный тип'] += 1
    elif row[16] == 'генератором идей':
        dct_type['оригинальный тип'] += 1

    # 18
    if row[17] == 'стремление нравиться':
        dct_type['демонстративный тип'] += 1
    elif row[17] == 'сочувствие':
        dct_type['эмотивный тип'] += 1
    elif row[17] == 'пунктуальность':
        dct_type['педантичный тип'] += 1
    elif row[17] == 'вспыльчивость':
        dct_type['импульсивный тип'] += 1

    # 19
    if row[18] == 'слава':
        dct_type['демонстративный тип'] += 1
    elif row[18] == 'любовь':
        dct_type['эмотивный тип'] += 1
    elif row[18] == 'власть':
        dct_type['целеустремленный тип'] += 1
    elif row[18] == 'порядок':
        dct_type['педантичный тип'] += 1

    # 20
    if row[19] == 'беспокоит завтрашний день':
        dct_type['тревожный тип'] += 1
    elif row[19] == 'переполняет энергия':
        dct_type['гипертимный тип'] += 1
    elif row[19] == 'раздражают всякие мелочи':
        dct_type['импульсивный тип'] += 1
    elif row[19] == 'посещают интересные идеи':
        dct_type['оригинальный тип'] += 1

    # 21
    if row[20] == 'принимать решения':
        dct_type['тревожный тип'] += 1
    elif row[20] == 'учитывать интересы других людей':
        dct_type['целеустремленный тип'] += 1
    elif row[20] == 'отступать от инструкции':
        dct_type['педантичный тип'] += 1
    elif row[20] == 'контролировать свои эмоции':
        dct_type['импульсивный тип'] += 1

    # 22
    if row[21] == 'напомнить о себе':
        dct_type['демонстративный тип'] += 1
    elif row[21] == 'задуматься о своей жизни':
        dct_type['эмотивный тип'] += 1
    elif row[21] == 'повеселиться с друзьями':
        dct_type['гипертимный тип'] += 1
    elif row[21] == 'получить подарки':
        dct_type['импульсивный тип'] += 1

    # 23
    if row[22] == 'медицина и образование':
        dct_type['эмотивный тип'] += 1
    elif row[22] == 'управление и бизнес':
        dct_type['целеустремленный тип'] += 1
    elif row[22] == 'контроль и оценка':
        dct_type['педантичный тип'] += 1
    elif row[22] == 'искусство и наука':
        dct_type['оригинальный тип'] += 1

    # 24
    if row[23] == 'выберу цвета, модные в этом сезоне':
        dct_type['демонстративный тип'] += 1
    elif row[23] == 'предпочту темные тона или оттенки серого':
        dct_type['тревожный тип'] += 1
    elif row[23] == 'выберу яркие, насыщенные цвета':
        dct_type['гипертимный тип'] += 1
    elif row[23] == 'вообще не обращу внимания на ее цвет':
        dct_type['оригинальный тип'] += 1

    # сортируем по убыванию
    result_lst = sorted(dct_type.items(), key=lambda t: t[1], reverse=True)
    begin_str = '\n'
    # создаем строку с результатами
    for sphere, value in result_lst:
        begin_str += f'{sphere}: {value};\n'

    # добавляем описание
    return begin_str

def calc_level_hpr(value):
    """
    Функция для подсчета уровня склонности к то или иной сфере
    """
    if 0 <= value <= 3:
        return 'тип не выражен'
    elif 4 <= value <= 6:
        return 'слабо выраженный тип'
    elif 7 <= value <= 9:
        return 'выраженный тип'
    elif 10 <= value <= 12:
        return 'ярко выраженный тип'




def create_result_rezapkina_hp(base_df:pd.DataFrame, out_dct:dict, lst_svod_cols:list):
    """
    Функция для подсчета результата если указаны колонки по которым нужно провести свод
    :param df: датафрейм с результатами
    :param out_dct: словарь с уже подсчитанными базовыми данными
    :param lst_svod_cols: список сводных колонок
    :return: словарь
    """
    lst_level = ['тип не выражен', 'слабо выраженный тип',
                 'выраженный тип',
                 'ярко выраженный тип'
                 ]

    lst_sphere = ['демонстративный тип', 'тревожный тип', 'эмотивный тип',
                  'целеустремленный тип',
                  'педантичный тип',
                  'гипертимный тип', 'импульсивный тип', 'оригинальный тип'
                  ]

    lst_reindex_one_level_cols = lst_svod_cols.copy()
    lst_reindex_one_level_cols.extend( ['тип не выражен', 'слабо выраженный тип',
             'выраженный тип',
             'ярко выраженный тип',
                                                      'Итого'])

    lst_reindex_one_sphere_cols = lst_svod_cols.copy()
    lst_reindex_one_sphere_cols.extend( ['демонстративный тип', 'тревожный тип', 'эмотивный тип',
              'целеустремленный тип',
              'педантичный тип',
              'гипертимный тип', 'импульсивный тип', 'оригинальный тип','Итого'])

    svod_count_one_level_df = calc_count_scale(base_df, lst_svod_cols,
                                               'Значение_ведущего_типа',
                                               'Уровень_выраженности',
                                               lst_reindex_one_level_cols, lst_level)

    svod_count_one_sphere_df = calc_count_scale(base_df, lst_svod_cols,
                                                'Значение_ведущего_типа',
                                                'Ведущий_тип',
                                                lst_reindex_one_sphere_cols, lst_sphere)

    # Считаем среднее по субшкалам
    svod_mean_one_df = pd.pivot_table(base_df,
                                      index=lst_svod_cols,
                                      values=['Значение_ведущего_типа',
                                              ],
                                      aggfunc=round_mean)
    svod_mean_one_df.reset_index(inplace=True)
    # упорядочиваем колонки
    new_order_cols = lst_svod_cols.copy()
    new_order_cols.extend((['Значение_ведущего_типа',
                            ]))
    svod_mean_one_df = svod_mean_one_df.reindex(columns=new_order_cols)

    dct_rename_cols_mean = {'Значение_ведущего_типа': 'Среднее значение ведущего типа',
                            }
    svod_mean_one_df.rename(columns=dct_rename_cols_mean, inplace=True)

    # очищаем название колонки по которой делали свод
    out_name_lst = []

    for name_col in lst_svod_cols:
        name = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_col)
        if len(lst_svod_cols) == 1:
            out_name_lst.append(name[:14])
        elif len(lst_svod_cols) == 2:
            out_name_lst.append(name[:7])
        else:
            out_name_lst.append(name[:4])

    out_name = ' '.join(out_name_lst)
    if len(out_name) > 14:
        out_name = out_name[:14]

    out_dct.update({f'Ср {out_name}': svod_mean_one_df,
                    f'Уровень {out_name}': svod_count_one_level_df,
                    f'Тип {out_name}': svod_count_one_sphere_df,
                    })

    if len(lst_svod_cols) == 1:
        return out_dct
    else:
        for idx, name_column in enumerate(lst_svod_cols):
            lst_reindex_column_level_cols = [lst_svod_cols[idx], 'тип не выражен', 'слабо выраженный тип',
             'выраженный тип',
             'ярко выраженный тип',
                                             'Итого']

            lst_reindex_column_sphere_cols = [lst_svod_cols[idx], 'демонстративный тип', 'тревожный тип', 'эмотивный тип',
              'целеустремленный тип',
              'педантичный тип',
              'гипертимный тип', 'импульсивный тип', 'оригинальный тип','Итого']

            svod_count_column_level_df = calc_count_scale(base_df, lst_svod_cols[idx],
                                                          'Значение_ведущего_типа',
                                                          'Уровень_выраженности',
                                                          lst_reindex_column_level_cols, lst_level)

            svod_count_column_sphere_df = calc_count_scale(base_df, lst_svod_cols[idx],
                                                           'Значение_ведущего_типа',
                                                           'Ведущий_тип',
                                                           lst_reindex_column_sphere_cols, lst_sphere)

            # Считаем среднее по субшкалам
            svod_mean_column_df = pd.pivot_table(base_df,
                                                 index=[lst_svod_cols[idx]],
                                                 values=['Значение_ведущего_типа',
                                                         ],
                                                 aggfunc=round_mean)
            svod_mean_column_df.reset_index(inplace=True)
            # упорядочиваем колонки
            new_order_cols = [lst_svod_cols[idx]].copy()
            new_order_cols.extend((['Значение_ведущего_типа',
                                    ]))
            svod_mean_column_df = svod_mean_column_df.reindex(columns=new_order_cols)

            dct_rename_cols_mean = {'Значение_ведущего_типа': 'Среднее значение ведущего типа',
                                    }
            svod_mean_column_df.rename(columns=dct_rename_cols_mean, inplace=True)


            name_column = lst_svod_cols[idx]
            name_column = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_column)
            name_column = name_column[:15]

            out_dct.update({f'Ср {name_column}': svod_mean_column_df,
                            f'Уровень {name_column}': svod_count_column_level_df,
                            f'Тип {name_column}': svod_count_column_sphere_df,
                            })
        return out_dct




def processing_rezapkina_hp(base_df: pd.DataFrame, answers_df: pd.DataFrame,lst_svod_cols:list):
    """
    Функция для обработки
    :param base_df: часть датафрейма с описательными колонками
    :param answers_df: часть датафрейма с ответами
    :param lst_svod_cols:  список с колонками по которым нужно делать свод
    """
    try:
        out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами
        if answers_df.shape[1] != 24:
            raise BadCountColumnsHPR

        # очищаем названия колонок от возможных сочетаний .1 которые добавляет пандас при одинаковых колонках
        clean_df_lst = []
        for name_column in answers_df.columns:
            clean_name = re.sub(r'.\d+$', '', name_column)
            clean_df_lst.append(clean_name)

        answers_df.columns = clean_df_lst

        lst_check_cols = ['Знакомясь с людьми, я ловлю себя на мысли, что тут же забываю их имена',
                          'Для меня очень важно, чтобы меня окружали люди',
                          'В большой веселой компании', 'Публичные выступления для меня – это',
                          'В любом коллективе важнее всего', 'Нового человека я обычно воспринимаю',
                          'Если мне нужно купить что-то из одежды, я выберу', 'Мой любимый жанр кино',
                          'Мне хотелось бы провести каникулы или отпуск', 'Мне кажется, что я трачу слишком много времени',
                          'Когда я прихожу в магазин, то я', 'Если бы я был миллионером, то',
                          'Я предпочитаю работу, на которой есть возможность', 'Меня привлекает работа, требующая',
                          'Мне ближе высказывание', 'Меня привлекает работа',
                          'Окружающие чаще считают меня', 'Моя главная черта — это',
                          'Главное в жизни', 'Меня часто',
                          'Мне трудно', 'День рождения для меня – это, прежде всего, возможность',
                          'В профессиональном плане меня больше привлекает', 'При выборе одежды я, скорее'
                          ]

        # Проверяем порядок колонок
        order_main_columns = lst_check_cols  # порядок колонок и названий как должно быть
        order_temp_df_columns = list(answers_df.columns)  # порядок колонок проверяемого файла
        error_order_lst = []  # список для несовпадающих пар
        # Сравниваем попарно колонки
        for main, temp in zip(order_main_columns, order_temp_df_columns):
            if main != temp:
                error_order_lst.append(f'На месте колонки {main} находится колонка {temp}')
                error_order_message = ';'.join(error_order_lst)
        if len(error_order_lst) != 0:
            raise BadOrderHPR

        # Делаем список списков
        valid_values = [['часто', 'редко', 'нет, потому что записываю их', 'я не думаю об этом'],
                        ['душевные', 'ответственные', 'жизнерадостные', 'дисциплинированные'],
                        ['я люблю быть в центре внимания', 'я чувствую себя неуютно', 'я обычно скучаю',
                         'я с трудом подыскиваю тему для разговора'],
                        ['возможность показать себя и свои способности', 'большой стресс',
                         'донести до слушателей свои идеи', 'форма общения'],
                        ['отсутствие конфликтов', 'работа на результат', 'дисциплина', 'возможность работать творчески'],
                        ['с доброжелательным интересом', 'как потенциального союзника', 'как потенциального соперника',
                         'нейтрально'],
                        ['самую модную вещь', 'что-нибудь неброское', 'классический костюм', 'удобную и практичную одежду'],
                        ['мелодрама', 'документальное кино', 'боевик', 'фэнтези'],
                        ['в какой-нибудь экзотической стране', 'в тихом, уединенном месте', 'вместе с близкими людьми',
                         'путешествуя в компании друзей'],
                        ['на себя', 'на других людей', 'на работу, учебу', 'на развлечения'],
                        ['долго не могу ничего выбрать из массы товаров', 'точно знаю, что должен купить',
                         'сравниваю и оцениваю товар, прежде чем сделать покупку', 'беру то, что попадается под руку'],
                        ['приумножал бы свое богатство', 'ни в чем бы себе не отказывал', 'не стал бы сорить деньгами',
                         'поддерживал бы проекты, связанные с наукой или искусством'],
                        ['общаться с известными людьми', 'ни за что не отвечать', 'принимать ответственные решения',
                         'решать творческие задачи'],
                        ['способности сопереживать людям', 'точности и аккуратности в ведении дел',
                         'навыков общения с разными людьми', 'силы и решительности'],
                        ['Лучшее – враг хорошего', 'Цель оправдывает средства', 'Доверяй, но проверяй',
                         'Хочешь жить – умей вертеться'],
                        ['аниматора', 'врача', 'военного', 'ученого'],
                        ['идеальным исполнителем', 'хорошим организатором', 'душой компании', 'генератором идей'],
                        ['стремление нравиться', 'сочувствие', 'пунктуальность', 'вспыльчивость'],
                        ['слава', 'любовь', 'власть', 'порядок'],
                        ['беспокоит завтрашний день', 'переполняет энергия', 'раздражают всякие мелочи',
                         'посещают интересные идеи'],
                        ['принимать решения', 'учитывать интересы других людей', 'отступать от инструкции',
                         'контролировать свои эмоции'],
                        ['напомнить о себе', 'задуматься о своей жизни', 'повеселиться с друзьями', 'получить подарки'],
                        ['медицина и образование', 'управление и бизнес', 'контроль и оценка', 'искусство и наука'],
                        ['выберу цвета, модные в этом сезоне', 'предпочту темные тона или оттенки серого',
                         'выберу яркие, насыщенные цвета', 'вообще не обращу внимания на ее цвет'],
                        ]

        lst_error_answers = []  # список для хранения строк где найдены неправильные ответы

        for idx, lst_values in enumerate(valid_values):
            mask = ~answers_df.iloc[:, idx].isin(lst_values)  # проверяем на допустимые значения
            # Получаем строки с отличающимися значениями
            result_check = answers_df.iloc[:, idx][mask]

            if len(result_check) != 0:
                error_row = list(map(lambda x: x + 2, result_check.index))
                error_row = list(map(str, error_row))
                error_row_lst = [f'В {idx + 1} вопросной колонке на строке {value}' for value in error_row]
                error_in_column = ','.join(error_row_lst)
                lst_error_answers.append(error_in_column)

        if len(lst_error_answers) != 0:
            error_message = ';'.join(lst_error_answers)
            raise BadValueHPR

        base_df[f'Распределение'] = answers_df.apply(processing_result_hpr, axis=1)
        base_df[f'Ведущий_тип'] = base_df[f'Распределение'].apply(
            extract_key_max_value)
        base_df[f'Значение_ведущего_типа'] = base_df[f'Распределение'].apply(
            extract_max_value)
        base_df[f'Уровень_выраженности'] = base_df[f'Значение_ведущего_типа'].apply(
            calc_level_hpr)

        # Создаем датафрейм для создания части в общий датафрейм
        part_df = pd.DataFrame()
        part_df['ХПР_Распределение'] = base_df['Распределение']
        part_df['ХПР_Ведущий_тип'] = base_df['Ведущий_тип']
        part_df['ХПР_Тип_Значение'] = base_df['Значение_ведущего_типа']
        part_df['ХПР_Тип_Уровень'] = base_df['Уровень_выраженности']

        base_df.sort_values(by='Значение_ведущего_типа', ascending=False, inplace=True)  # сортируем
        out_answer_df = pd.concat([out_answer_df, answers_df], axis=1)  # Датафрейм для проверки

        # Создаем строку с описанием
        description_result = """
        Шкала оценки результатов
        Отнесенность к определенному типу правомерна в случае его выраженности на фоне остальных типов (более 6 баллов). Сочетание повышенных показателей по 2-3 типам говорит о смешанных типах. Равномерное (2-4 балла) распределение баллов по всем типам может свидетельствовать об отсутствии акцентуации.
    
        10-12 баллов – ярко выраженный тип;
        7-9 баллов – выраженный тип;
        4-6 баллов – слабо выраженный тип;
        0-3 баллов – тип не выражен.
    
        Описание типов:
        Демонстративный тип:
        Демонстративные дети обладают выразительной мимикой, они любят и умеют нравиться, стремятся быть в центре внимания. Черты демонстративного типа подкрепляются воспитанием: в погоне за очередной порцией внимания демонстративные дети впадают в истерику, а подростковом возрасте с этой целью могут предпринимать попытки самоубийства. Проблемы со здоровьем также нередко вызваны подсознательным стремлением привлечь внимание к себе.
        Демонстративные личности легко вживаются в разные социальные роли, обладают развитым
        воображением, но иногда настолько увлекаются, что теряют грань между вымыслом и реальностью.
        Для них характерна быстрая смена настроений, поверхностность переживаний, ревность к чужим
        успехам, чувствительность к оценкам, нетерпимость к критике, самоуверенность, завышенный
        уровень притязаний, потребность в признании.
        Подростки демонстративного типа способны увлечь других артистизмом, неординарностью
        мышления и поступков, однако они плохо прогнозируют последствия своих действий, неспособны к методичной работе, требующей терпения и усилий. Они легко устанавливают контакты, но в
        отношениях с другими людьми нет глубины и стремления понять другого. Ярко выраженный демонстративный тип характеризуется доминантой на себе, при которой другие являются только фоном.
        Дети и подростки данного типа с удовольствием участвуют в концертах и спектаклях, охотно занимаются общественной работой, дающей возможность быть в центре внимания.
        Демонстративные черты характера необходимы артистам, поскольку им требуется умение перевоплотиться в своих героев. Преподаватель, политик, общественный деятель также обладают демонстративными чертами характера, которые помогают донести свои идеи до слушателей. Однако наличие этих черт еще не является гарантией профессиональной успешности – необходимы таланты и способности, а также терпение и трудолюбие, которых демонстративным личностям часто не хватает.
        Возможно, поэтому их не привлекает работа, требующая способности к искреннему сопереживанию, умения слышать другого и ставить себя на его место, оказывать помощь (социальная работа); концентрации на проблеме, терпения и упорства (научная работа); устойчивости к монотонному труду и четкой регламентации (работа на производстве и в офисе).
        Представители демонстративного типа при выборе профессии часто руководствуются соображениями престижа, поэтому предпочитают деятельность, связанную с выступлениями перед публикой; работу в СМИ, политику; шоу-бизнес; актерско-сценическую деятельность, а также профессии, которые в данный момент пользуются популярностью. Для успешной работы необходимо развивать ответственность, самоконтроль, критичность к себе и внимание к другим людям, способность доводить начатое дело до конца.
    
    
        Тревожный тип:
        Дети тревожного типа часто боятся темноты, животных, не могут оставаться одни. Они не любят чрезмерно шумных игр со сверстниками, застенчивы настолько, что часто стесняются отвечать перед классом, а контрольная работа или экзамен являются для них стрессогенной ситуацией.
        Им свойственны низкая контактность, беспокойство, пониженный фон настроения, нерешительность, робость, неуверенность в себе, угрызения совести.
        Люди этого типа обладают чувствительной нервной системой, способны предвидеть негативное развитие событий, однако склонны преувеличивать серьезность положения, нередко испытывают волнение и беспокойство без объективных причин.
        Они осторожны и предусмотрительны, не любят быть в центре внимания, избегают перемен. Обостренное чувство вины заставляет их болезненно переживать критику. Хотя у них рано формируется чувство ответственности, им трудно принимать решения и делать выбор. Они предъявляют высокие моральные требования прежде всего к себе.
        Нередко подростки тревожного типа испытывают чувство собственной неполноценности на фоне более благополучных в эмоциональном плане сверстников, стараясь компенсировать его за счет успехов в комфортных для них видах деятельности, не требующих быстрого принятия решений.
        При выборе профессии они обычно занижают уровень притязаний, недооценивая свои возможности.
        Деятельность, связанная с риском, неопределенностью, повышенной ответственностью за других людей, интенсивным общением, новыми контактами, принятием важных решений может даваться им ценой значительного нервно-психического напряжения.
        Представители тревожного типа, как правило, аккуратны, исполнительны и надежны, что позволяет быть успешным, выполняя четко структурированную работу в предсказуемых, стабильных условиях, с ограниченным числом контактов: научная работа, делопроизводство, работа с текстами и объектами природы, ручная работа, требующая аккуратности, усидчивости, устойчивости к монотонии.
    
        Эмотивный тип:
        Драматические сцены, грустная концовка сцена фильма книги вызывает у эмотивных детей искренние слезы. Так же легко у них появляются слезы радости. С возрастом сила чувств эмотивных личностей не ослабевает: они переживают горе и радость острее, чем другие люди.
        Эмотивные дети и подростки не любят больших компаний, азартных, подвижных игр. Открыты и общительны они обычно бывают только с теми, кого хорошо знают.
        Эмотивные подростки разборчивы в общении и постоянны в привязанностях, могут испытывать трудности адаптации среди сверстников. Редко вступают в конфликты, обиды носят в себе, не выплескивая их наружу.
        У них рано формируется чувство долга, обнаруживаются высокие моральные требования к себе и окружающим людям. Благодаря ответственности и трудолюбию они обгоняют более способных, но менее старательных сверстников.
        При выборе профессии нередко руководствуются советами родителей, к которым очень привязаны.
        Самая яркая черта эмотивной личности – способность к сопереживанию, отзывчивость, великодушие.
        Несмотря на низкий порог чувствительности, эмотивы обладают достаточно сильной нервной системой, чтобы справляться с эмоциональными нагрузками, однако в длительной стрессовой ситуации есть риск возникновения психосоматических заболеваний.
        В принятии решений эмотивы чаще руководствуются эмоциями, чем логикой. Они обладают хорошей интуицией, позволяющей чувствовать фальшь в отношениях.
        В отношении с другими людьми тактичны и дружелюбны, предпочитают неформальное общение.В работе ответственны и добросовестны.
        Однако им бывает сложно принимать жесткие решения, затрагивающие интересы других людей. Именно поэтому ярко выраженным представителям эмотивного типа не рекомендуется управленческая работа.
        Эмотивной личности наиболее подходят профессии, связанные с образованием, воспитанием, консультированием, обслуживанием, социальной работой.
        Эмотивы комфортно чувствуют себя в видах деятельности, связанных с искусством и природой.
    
        Целеустремленный тип:
        Целеустремленность традиционно считается достоинством и гарантией успеха, поэтому детям внушается, что нужно добиваться своих целей. Однако существует особый тип личности, который, кажется, и так «запрограммирован» на достижение высоких показателей в любом виде деятельности.
        Люди этого типа не слишком общительны – более широким и теплым контактам препятствует обидчивость, недоверчивость, конфликтность и склонность к нравоучениям.
        Убеждение в своей правоте и жесткость в отстаивании своих убеждений полезны в исключительных случаях, но чаще эти качества препятствуют конструктивному решению вопросов.
        В конфликтных ситуациях целеустремленные личности предпочитают стратегию соперничества.
        Благодаря трудолюбию и честолюбию целеустремленные личности достигают больших карьерных успехов, но с годами удовольствие от достижений часто сменяется разочарованием.
        Мнение окружающих для них безразлично – они настолько убеждены в своей правоте, что сами способны многих переубедить. Сильная нервная система позволяет им добиваться поставленных целей, не взирая на средства.
        Однако недостаток гибкости в принятии решений, излишняя прагматичность и недооценка «человеческого фактора» может снижать их эффективность.
        Многие чиновники, военачальники, политики и общественные деятели, формальные и неформальные лидеры относятся к целеустремленному типу. Люди этого типа могут быть эффективны в различных видах деятельности, так как обладают хорошими организаторскими способностями, они дисциплинированы и способны контролировать свои эмоции.
        Однако целеустремленным людям может не хватать способности к сопереживанию, умения слышать другого и ставить себя на его место, оказывать помощь, творческого мышления, что препятствует успехам в творческих видах деятельности и социальной работе.
    
        Педантичный тип:
        Дети, относящиеся к этому типу, отличаются не свойственными их возрасту серьезностью и ответственностью, постоянством в привязанностях.
        Люди это типа законопослушны, и поэтому остро реагируют на любое нарушение порядка, иногда доходя в своих требованиях до формализма. Они пунктуальны и аккуратны, много внимания уделяют чистоте, порядку и качеству работы, но сомневаются в правильности выполненной работы, часто перепроверяют себя и других. Аккуратность и предусмотрительность сочетаются с неуверенностью и постоянным самоконтролем.
        Они не стремятся к лидерству, уклоняются от конфликтов, не любят авралов и неожиданностей, не умеют импровизировать, поэтому работа, требующая умения нестандартно мыслить и самостоятельно принимать решения ярким представителям этого типа не слишком подходит.
        Работа в условиях неопределенности людям этого типа может даваться ценой значительного психоэмоционального напряжения.
        Однако их исполнительность, готовность заниматься рутинной работой, умение подчиняться установленному порядку, следовать инструкциям и директивам и требовать того же от других необходимы в планово-экономической деятельности, работе офисного работника, чиновника, сотрудника службы безопасности, военного, специалиста по работе с персоналом.
    
        Гипертимный тип:
        Воспитатели и учителя часто жалуются на отвлекаемость и недисциплинированность гипертимных детей, отмечая при этом их хорошие способности и живой ум. Мелочный контроль со стороны взрослых, навязчивая опека, постоянные нравоучения вызывают у гипертимов протестные реакции, провоцируют нарушение правил и порядков.
        У гипертимов высокий жизненный тонус, хороший аппетит и здоровый сон, они обгоняют сверстников в физическом развитии, легко справляются с физическими нагрузками. Но отличное настроение могут испортить вспышки раздражения, вызванные противодействием в реализации их планов.
        Гипертимы с трудом подчиняются чужой воле и плохо переносят жесткую регламентацию деятельности, а также одиночество и вынужденное безделье, невозможность применить бьющую через край энергию.
        Гипертимы стремятся к неформальному лидерству среди сверстников, и это им легко удается благодаря энергии, смелости, находчивости, готовности рисковать и умению убеждать и вести за собой. Правда, авантюризм гипертима может иметь непредсказуемые последствия для него самого и его последователей. У гипертимов высок риск зависимого поведения.
        Увлечения гипертимных подростков отличаются разнообразием, но непостоянством. При стремлении командовать роль официальных лидеров их не привлекает, так как она сопряжена с ответственностью.
        Они обычно с легкостью дают обещания, но не всегда их выполняют.
        Всегда хорошее настроение и высокий жизненный тонус создают благоприятные условия для переоценки своих способностей и возможностей. Взгляд на собственное будущее, как правило, полон оптимизма, даже при отсутствии к этому каких-либо оснований.
        Профессию нередко выбирают за компанию.
        Гипертимы не выносят рутинную, однообразную работу, однако способны быть инициатором различных проектов, эффективно выполнять работу, связанную с передачей информации и организацией мероприятий, презентацией товаров и услуг.
        Для успешной работы необходимо развивать ответственность, самоконтроль, критичность к себе и внимание к потребностям других людей, способность доводить начатое дело до конца.
    
        Импульсивный тип:
        Импульсивные дети доставляют много хлопот сверстникам и взрослым вспыльчивостью и раздражительностью, которые нередко выливаются в физическую агрессию. Импульсивные подростки отличаются атлетическим телосложением и большой физической силой, поэтому показывают высокие результаты в спорте.
        Импульсивные личности нетерпимы и не склонны идти на компромисс. Неуживчивость может быть причиной частой смены работы. Им трудно контролировать свои инстинкты и желания, поэтому любые препятствия на своем пути вызывают у них гнев и могут толкнуть на противоправные поступки.
        Хотя импульсивным людям трудно скрывать и контролировать свои негативные эмоции, особенно в тех случаях, когда ситуация выходит из-под их контроля, природный интеллект и хорошее воспитание способны сгладить эти черты характера.
        Люди этого типа обычно имеют активную личностную позицию, проявляют высокую поисковую активность и мотивацию достижений, быстро принимают решения. Они смелы и решительны, в других уважают силу, умеют постоять за себя, не боятся обострения ситуации, склонны к расширению своего влияния, полностью отдаются своей работе, с трудом переключаясь на другой вид деятельности.
        Все эти качества позволяют им добиваться успеха в профессиях, требующих силы, выносливости, четкого соблюдения инструкции: спорт, экстремальные виды деятельности, сельское хозяйство, производство, охранная деятельность.
        Однако есть виды деятельности, в которых необходимы качества, не свойственные этому типу: гибкость, способность к сопереживанию, умение слышать другого и ставить себя на его место, оказывать помощь (образование, социальная работа); нестандартное мышление (наука, искусство).
    
        Оригинальный тип:
        Представители оригинального типа с детства отличаются своеобразием интересов и способностей и на всю жизнь сохраняют детскую непосредственность и непредсказуемость. Их не тяготит одиночество, а взрослая компания для них интереснее, чем компания сверстников.
        Их часто считают чудаками, не понимают и не принимают всерьез, поэтому они могут испытывать трудности социализации.
        Люди этого типа способны находить оригинальные решения самых различных задач. Они критически относятся к мнению и вкусам большинства людей, живя в соответствии со своим внутренним ритмом, своими ценностями. Предметы и быт для них значат гораздо меньше, чем душевный комфорт и мир идей.
        Интересы и способности представителей оригинального типа непостижимы для людей других типов.
        Нестандартное мышление, развитая интуиция и высокая работоспособность позволяет им достигать успехов в искусстве и науке, в том числе в сфере Интернет-технологий, совершать открытия, делать изобретения.
        Однако они не всегда понимают состояния других людей, испытывают трудности с выражением своих чувств, слабо владеют навыками общения.
        Пренебрежение формальной стороной работы, индивидуализм, неприятие жесткого регламента не способствуют успехам в сфере управления, воспитания, коммуникаций и делопроизводства, требующих развитых навыков общения, умения слышать другого и ставить себя на его место, способности выполнять рутинную работы и точно следовать инструкции.
                        """

        # создаем описание результата
        base_df[f'Описание_результата'] = 'Характер и профессия.\nРезультат тестирования:\n' + base_df[
            f'Распределение'] + description_result
        part_df['ХПР_Описание_результата'] = base_df[f'Описание_результата']

        # Делаем свод по уровню
        dct_svod_level = {'Значение_ведущего_типа': 'Уровень_выраженности',
                          }
        dct_rename_svod_level = {'Значение_ведущего_типа': 'Количество',
                                 }
        # Списки для шкал
        lst_level = ['тип не выражен', 'слабо выраженный тип',
                     'выраженный тип',
                     'ярко выраженный тип'
                     ]
        base_svod_level_df = create_union_svod(base_df, dct_svod_level, dct_rename_svod_level, lst_level)

        # Делаем свод по сфере
        dct_svod_sphere = {'Значение_ведущего_типа': 'Ведущий_тип',
                           }

        dct_rename_svod_sphere = {'Значение_ведущего_типа': 'Количество',
                                  }

        # Списки для шкал
        lst_sphere = ['демонстративный тип', 'тревожный тип', 'эмотивный тип',
                      'целеустремленный тип',
                      'педантичный тип',
                      'гипертимный тип','импульсивный тип','оригинальный тип'
                      ]

        base_svod_sphere_df = create_union_svod(base_df, dct_svod_sphere, dct_rename_svod_sphere, lst_sphere)

        # считаем среднее значение
        avg_main = round(base_df['Значение_ведущего_типа'].mean(), 2)

        avg_dct = {'Среднее значение Ведущий тип': avg_main,
                   }

        avg_df = pd.DataFrame.from_dict(avg_dct, orient='index')
        avg_df = avg_df.reset_index()
        avg_df.columns = ['Показатель', 'Среднее значение']

        # формируем основной словарь
        out_dct = {'Списочный результат': base_df, 'Список для проверки': out_answer_df,
                   'Среднее': avg_df,
                   'Свод по уровням': base_svod_level_df,
                   }
        # Листы по уровням
        dct_level = dict()
        for level in lst_level:
            temp_df = base_df[base_df['Уровень_выраженности'] == level]
            if temp_df.shape[0] != 0:
                if level == 'тип не выражен':
                    level = 'не выражен'
                elif level == 'слабо выраженный тип':
                    level = 'слабо выражен'
                elif level == 'ярко выраженный тип':
                    level = 'ярко выражен'
                dct_level[level] = temp_df
        out_dct.update(dct_level)

        # Добавляем свод по сферам
        out_dct.update({
            'Свод по типам': base_svod_sphere_df,
        })
        # Листы по сферам
        dct_sphere = dict()
        for sphere in lst_sphere:
            temp_df = base_df[base_df['Ведущий_тип'] == sphere]
            if temp_df.shape[0] != 0:
                if sphere == 'демонстративный тип':
                    sphere = 'демонстративный'
                elif sphere == 'тревожный тип':
                    sphere = 'тревожный'
                elif sphere == 'эмотивный тип':
                    sphere = 'эмотивный'
                elif sphere == 'целеустремленный тип':
                    sphere = 'целеустремленный'
                elif sphere == 'педантичный тип':
                    sphere = 'педантичный'
                elif sphere == 'гипертимный тип':
                    sphere = 'гипертимный'
                elif sphere == 'импульсивный тип':
                    sphere = 'импульсивный'
                elif sphere == 'оригинальный тип':
                    sphere = 'оригинальный'

                dct_sphere[sphere] = temp_df
        out_dct.update(dct_sphere)

        """
                           Сохраняем в зависимости от необходимости делать своды по определенным колонкам
                           """
        if len(lst_svod_cols) == 0:
            return out_dct, part_df
        else:
            out_dct = create_result_rezapkina_hp(base_df, out_dct, lst_svod_cols)

            return out_dct, part_df

    except BadOrderHPR:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Характер и профессия Резапкина обнаружены неправильные вопросы. Проверьте названия колонок с вопросами:\n'
                             f'{error_order_message}\n'
                             f'Используйте при создании Яндекс-формы написание вопросов из руководства пользователя программы Лахесис.')
    except BadValueHPR:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Характер и профессия Резапкина обнаружены неправильные варианты ответов. Проверьте ответы на указанных строках:\n'
                             f'{error_message}\n'
                             f'Используйте при создании Яндекс-формы написание вариантов ответа из руководства пользователя программы Лахесис.')


    except BadCountColumnsHPR:
        messagebox.showerror('Лахеcис',
                             f'Проверьте количество колонок с ответами на тест Характер и профессия Резапкина\n'
                             f'Должно быть 24 колонки с ответами')





