"""
Скрипт для обработки результатов теста ценностные ориентиры в карьере
"""
import pandas as pd
import re
from tkinter import messagebox
from lachesis_support_functions import convert_to_int,round_mean,sort_name_class,create_union_svod,create_list_on_level

class BadOrderCOK(Exception):
    """
    Исключение для обработки случая когда колонки не совпадают
    """
    pass


class BadValueCOK(Exception):
    """
    Исключение для неправильных значений в вариантах ответов
    """
    pass

class BadCountColumnsCOK(Exception):
    """
    Исключение для обработки случая если количество колонок не равно 41
    """
    pass


def calc_level_cok(value):
    """
    Функция для подсчета уровня склонности к то или иной сфере
    """
    if value <= 4:
        return 'не выраженная карьерная ориентация'
    else:
        return 'выраженная карьерная ориентация'

def extract_key_max_value(cell:str) ->str:
    """
    Функция для извлечения ключа с максимальным значением
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return cell
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return max(dct_result, key=dct_result.get)

def extract_max_value(cell:str):
    """
    Функция для извлечения значения ключа с максимальным значением , ха звучит странно
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return 0
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return dct_result[max(dct_result, key=dct_result.get)]

def processing_result_cok(row):
    """
Функция для вычисления итогового балла  результатов теста Диагностика ценностных ориентаций в карьере
"""

    # Создаем словарь для хранения данных
    dct_type = {'Профессиональная компетентность': 0, 'Менеджмент': 0, 'Автономия (независимость)': 0,
                'Стабильность работы': 0,
                'Стабильность места жительства': 0, 'Служение': 0, 'Вызов': 0,
                'Интеграция стилей жизни': 0, 'Предпринимательство': 0}
    # 1
    dct_type['Профессиональная компетентность'] += row[0]

    # 2
    dct_type['Менеджмент'] += row[1]

    # 3
    dct_type['Автономия (независимость)'] += row[2]

    # 4
    dct_type['Стабильность работы'] += row[3]

    # 5
    dct_type['Служение'] += row[4]

    # 6
    dct_type['Вызов'] += row[5]

    # 7
    dct_type['Интеграция стилей жизни'] += row[6]

    # 8
    dct_type['Предпринимательство'] += row[7]

    # 9
    dct_type['Профессиональная компетентность'] += row[8]

    # 10
    dct_type['Менеджмент'] += row[9]

    # 11
    dct_type['Автономия (независимость)'] += row[10]

    # 12
    dct_type['Стабильность работы'] += row[11]

    # 13
    dct_type['Служение'] += row[12]

    # 14
    dct_type['Вызов'] += row[13]

    # 15
    dct_type['Интеграция стилей жизни'] += row[14]

    # 16
    dct_type['Предпринимательство'] += row[15]

    # 17
    dct_type['Профессиональная компетентность'] += row[16]

    # 18
    dct_type['Менеджмент'] += row[17]

    # 19
    dct_type['Автономия (независимость)'] += row[18]

    # 20
    dct_type['Стабильность места жительства'] += row[19]

    # 21
    dct_type['Служение'] += row[20]

    # 22
    dct_type['Вызов'] += row[21]

    # 23
    dct_type['Интеграция стилей жизни'] += row[22]

    # 24
    dct_type['Предпринимательство'] += row[23]

    # 25
    dct_type['Профессиональная компетентность'] += row[24]

    # 26
    dct_type['Менеджмент'] += row[25]

    # 27
    dct_type['Автономия (независимость)'] += row[26]

    # 28
    dct_type['Стабильность места жительства'] += row[27]

    # 29
    dct_type['Служение'] += row[28]

    # 30
    dct_type['Вызов'] += row[29]

    # 31
    dct_type['Интеграция стилей жизни'] += row[30]

    # 32
    dct_type['Предпринимательство'] += row[31]

    # 33
    dct_type['Профессиональная компетентность'] += row[32]

    # 34
    dct_type['Менеджмент'] += row[33]

    # 35
    dct_type['Автономия (независимость)'] += row[34]

    # 36
    dct_type['Стабильность работы'] += row[35]

    # 37
    dct_type['Служение'] += row[36]

    # 38
    dct_type['Вызов'] += row[37]

    # 39
    dct_type['Интеграция стилей жизни'] += row[38]

    # 40
    dct_type['Предпринимательство'] += row[39]

    # 41
    dct_type['Стабильность места жительства'] += row[40]

    # Делим на 5 результаты
    for key, value in dct_type.items():
        if 'Стабильность' in key:
            dct_type[key] = round(dct_type[key] / 3)
        else:
            dct_type[key] = round(dct_type[key] / 5)
    # Сортируем
    result_lst = sorted(dct_type.items(), key=lambda t: t[1], reverse=True)

    begin_str = '\n'
    # создаем строку с результатами
    for sphere, value in result_lst:
        begin_str += f'{sphere}: {value};\n'

    return begin_str

def calc_count_level(df:pd.DataFrame, lst_cat:list, val_cat, col_cat, lst_cols:list):
    """
    Функция для создания сводных датафреймов по шкалам

    :param df: датафрейм с данными
    :param lst_cat:список колонок по которым будет формироваться свод
    :param val_cat:значение по которому будет формироваться свод
    :param col_cat: колонка по которой будет формироваться свод
    :param lst_cols: список с колонками
    :return:датафрейм
    """
    count_df = pd.pivot_table(df, index=lst_cat,
                                             columns=col_cat,
                                             values=val_cat,
                                             aggfunc='count', margins=True, margins_name='Итого')


    count_df.reset_index(inplace=True)
    count_df = count_df.reindex(columns=lst_cols)
    count_df['% не выраженная карьерная ориентация от общего'] = round(
        count_df['не выраженная карьерная ориентация'] / count_df['Итого'], 2) * 100
    count_df['% выраженная карьерная ориентация от общего'] = round(
        count_df['выраженная карьерная ориентация'] / count_df['Итого'], 2) * 100

    return count_df



def calc_count_sphere(df:pd.DataFrame, lst_cat:list, val_cat, col_cat, lst_cols:list):
    """
    Функция для создания сводных датафреймов по шкалам

    :param df: датафрейм с данными
    :param lst_cat:список колонок по которым будет формироваться свод
    :param val_cat:значение по которому будет формироваться свод
    :param col_cat: колонка по которой будет формироваться свод
    :param lst_cols: список с колонками
    :return:датафрейм
    """
    count_df = pd.pivot_table(df, index=lst_cat,
                                             columns=col_cat,
                                             values=val_cat,
                                             aggfunc='count', margins=True, margins_name='Итого')


    count_df.reset_index(inplace=True)
    count_df = count_df.reindex(columns=lst_cols)
    count_df['% Профессиональная компетентность от общего'] = round(
        count_df['Профессиональная компетентность'] / count_df['Итого'], 2) * 100
    count_df['% Менеджмент от общего'] = round(
        count_df['Менеджмент'] / count_df['Итого'], 2) * 100
    count_df['% Автономия (независимость) от общего'] = round(
        count_df['Автономия (независимость)'] / count_df['Итого'], 2) * 100
    count_df['% Стабильность работы от общего'] = round(
        count_df['Стабильность работы'] / count_df['Итого'], 2) * 100
    count_df['% Стабильность места жительства от общего'] = round(
        count_df['Стабильность места жительства'] / count_df['Итого'], 2) * 100
    count_df['% Служение от общего'] = round(
        count_df['Служение'] / count_df['Итого'], 2) * 100
    count_df['% Вызов от общего'] = round(
        count_df['Вызов'] / count_df['Итого'], 2) * 100
    count_df['% Интеграция стилей жизни от общего'] = round(
        count_df['Интеграция стилей жизни'] / count_df['Итого'], 2) * 100
    count_df['% Предпринимательство от общего'] = round(
        count_df['Предпринимательство'] / count_df['Итого'], 2) * 100

    return count_df







def create_result_shein_cok(base_df:pd.DataFrame, out_dct:dict, lst_svod_cols:list):
    """
    Функция для подсчета результата если указаны колонки по которым нужно провести свод
    :param df: датафрейм с результатами
    :param out_dct: словарь с уже подсчитанными базовыми данными
    :param lst_svod_cols: список сводных колонок
    :return: словарь
    """
    lst_reindex_one_level_cols = lst_svod_cols.copy()
    lst_reindex_one_level_cols.extend( ['не выраженная карьерная ориентация', 'выраженная карьерная ориентация',
                                                      'Итого'])

    lst_reindex_one_sphere_cols = lst_svod_cols.copy()
    lst_reindex_one_sphere_cols.extend( ['Профессиональная компетентность', 'Менеджмент','Автономия (независимость)','Стабильность работы',
                 'Стабильность места жительства','Служение','Вызов','Интеграция стилей жизни','Предпринимательство',
                                                      'Итого'])

    svod_count_one_level_df = calc_count_level(base_df, lst_svod_cols,
                                                      'Значение_ведущая_карьерная_ориентация',
                                                      'Уровень_выраженности',
                                                      lst_reindex_one_level_cols)

    svod_count_one_sphere_df = calc_count_sphere(base_df, lst_svod_cols,
                                                      'Значение_ведущая_карьерная_ориентация',
                                                      'Ведущая_карьерная_ориентация',
                                                      lst_reindex_one_sphere_cols)

    # Считаем среднее по субшкалам
    svod_mean_one_df = pd.pivot_table(base_df,
                                      index=lst_svod_cols,
                                      values=['Значение_ведущая_карьерная_ориентация',
                                              ],
                                      aggfunc=round_mean)
    svod_mean_one_df.reset_index(inplace=True)
    # упорядочиваем колонки
    new_order_cols = lst_svod_cols.copy()
    new_order_cols.extend((['Значение_ведущая_карьерная_ориентация',
                            ]))
    svod_mean_one_df = svod_mean_one_df.reindex(columns=new_order_cols)

    dct_rename_cols_mean = {'Значение_ведущая_карьерная_ориентация': 'Среднее значение ведущей карьерной ориентации',
                            }
    svod_mean_one_df.rename(columns=dct_rename_cols_mean, inplace=True)

    # очищаем название колонки по которой делали свод
    out_name_lst = []

    for name_col in lst_svod_cols:
        name = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_col)
        if len(lst_svod_cols) == 1:
            out_name_lst.append(name[:14])
        elif len(lst_svod_cols) == 2:
            out_name_lst.append(name[:7])
        else:
            out_name_lst.append(name[:4])

    out_name = ' '.join(out_name_lst)
    if len(out_name) > 14:
        out_name = out_name[:14]

    out_dct.update({f'Ср {out_name}': svod_mean_one_df,
                    f'Уровень {out_name}': svod_count_one_level_df,
                    f'Ориентация {out_name}': svod_count_one_sphere_df,
                    })

    if len(lst_svod_cols) == 1:
        return out_dct
    else:
        for idx, name_column in enumerate(lst_svod_cols):
            lst_reindex_column_level_cols = [lst_svod_cols[idx], 'не выраженная карьерная ориентация', 'выраженная карьерная ориентация',
                                             'Итого']

            lst_reindex_column_sphere_cols = [lst_svod_cols[idx], 'Профессиональная компетентность', 'Менеджмент','Автономия (независимость)','Стабильность работы',
                 'Стабильность места жительства','Служение','Вызов','Интеграция стилей жизни','Предпринимательство',
                                             'Итого']

            svod_count_column_level_df = calc_count_level(base_df, lst_svod_cols[idx],
                                                       'Значение_ведущая_карьерная_ориентация',
                                                       'Уровень_выраженности',
                                                       lst_reindex_column_level_cols)

            svod_count_column_sphere_df = calc_count_sphere(base_df, lst_svod_cols[idx],
                                                         'Значение_ведущая_карьерная_ориентация',
                                                         'Ведущая_карьерная_ориентация',
                                                         lst_reindex_column_sphere_cols)

            # Считаем среднее по субшкалам
            svod_mean_column_df = pd.pivot_table(base_df,
                                              index=[lst_svod_cols[idx]],
                                              values=['Значение_ведущая_карьерная_ориентация',
                                                      ],
                                              aggfunc=round_mean)
            svod_mean_column_df.reset_index(inplace=True)
            # упорядочиваем колонки
            new_order_cols = [lst_svod_cols[idx]].copy()
            new_order_cols.extend((['Значение_ведущая_карьерная_ориентация',
                                    ]))
            svod_mean_column_df = svod_mean_column_df.reindex(columns=new_order_cols)

            dct_rename_cols_mean = {'Значение_ведущая_карьерная_ориентация': 'Среднее значение ведущей карьерной ориентации',
                                    }
            svod_mean_column_df.rename(columns=dct_rename_cols_mean, inplace=True)

            name_column = lst_svod_cols[idx]
            name_column = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_column)
            name_column = name_column[:15]

            out_dct.update({f'Ср {name_column}': svod_mean_column_df,
                            f'Уровень {name_column}': svod_count_column_level_df,
                            f'Ориентация {name_column}': svod_count_column_sphere_df,
                            })
        return out_dct














def processing_shein_cok(base_df: pd.DataFrame, answers_df: pd.DataFrame,lst_svod_cols:list):
    """
    Функция для обработки
    :param base_df: часть датафрейма с описательными колонками
    :param answers_df: часть датафрейма с ответами
    :param lst_svod_cols:  список с колонками по которым нужно делать свод
    """
    try:
        out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами
        if answers_df.shape[1] != 41:
            raise BadCountColumnsCOK

        # очищаем названия колонок от возможных сочетаний .1 которые добавляет пандас при одинаковых колонках
        clean_df_lst = []
        for name_column in answers_df.columns:
            clean_name = re.sub(r'.\d+$', '', name_column)
            clean_df_lst.append(clean_name)

        answers_df.columns = clean_df_lst

        lst_check_cols = ['Строить свою карьеру в пределах конкретной научной или технической сферы.','Осуществлять наблюдение и контроль над людьми, влиять на них на всех уровнях.',
                          'Иметь возможность делать все по-своему и не быть стесненным правилами какой- либо организации.','Иметь постоянное место работы с гарантированным окладом и социальной защищенностью.',
                          'Употреблять свое умение общаться на пользу людям, помогать другим.','Работать над проблемами, которые представляются почти неразрешимыми.',
                          'Вести такой образ жизни, чтобы интересы семьи и карьеры взаимно уравновешивали друг друга.','Создать и построить нечто, что будет всецело моим произведением или идеей.',
                          'Продолжать работу по своей специальности, чем получить более высокую должность, не связанную с моей специальностью.','Быть первым руководителем в организации.',
                          'Иметь работу, не связанную с режимом или другими организационными ограничениями.','Работать в организации, которая обеспечит мне стабильность на длительный период времени.',
                          'Употребить свои умения и способности на то, чтобы сделать мир лучше.','Соревноваться с другими и побеждать.',
                          'Строить карьеру, которая позволит мне не изменять своему образу жизни.','Создать новое коммерческое предприятие.',
                          'Посвятить всю жизнь избранной профессии.','Занять высокую руководящую должность.',
                          'Иметь работу, которая представляет максимум свободы и автономии в выборе характера занятий, времени выполнения и т.д.','Оставаться на одном месте жительства, чем переехать в связи с повышением.',
                          'Иметь возможность использовать свои умения и таланты для служения важной цели.','Единственная действительная цель моей карьеры – находить и решать трудные проблемы, независимо от того, в какой области они возникли.',
                          'Я всегда стремлюсь уделять одинаковое внимание моей семье и моей карьере.','Я всегда нахожусь в поиске идей, которые дадут мне возможность начать и построить свое собственное дело.',
                          'Я соглашусь на руководящую должность только в том случае, если она находится в сфере моей профессиональной компетенции.','Я хотел бы достичь такого положения в организации, которое давало бы возможность наблюдать за работой других и интегрировать их деятельность.',
                          'В моей профессиональной деятельности я более всего забочусь о своей свободе и автономии.','Для меня важнее остаться на нынешнем месте жительства, чем получить повышение или новую работу в другой деятельности.',
                          'Я всегда искал работу, на которой мог бы приносить пользу другим.','Соревнование и выигрыш – это наиболее важные и волнующие стороны моей карьеры.',
                          'Карьера имеет смысл только в том случае, если она позволяет вести жизнь, которая мне нравится.','Предпринимательская деятельность составляет центральную часть моей карьеры.',
                          'Я бы скорее ушел из организации, чем стал заниматься работой, не связанной с моей профессией.','Я буду считать, что достиг успеха в карьере только тогда, когда стану руководителем высокого уровня в солидной организации.',
                          'Я не хочу, чтобы меня стесняла какая-нибудь организация или мир бизнеса.','Я бы предпочел работать в организации, которая обеспечивает длительный контракт.',
                          'Я бы хотел посвятить свою карьеру достижению важной и полезной цели.','Я чувствую себя преуспевающим только тогда, когда я постоянно вовлечен в решение трудных проблем или в ситуацию соревнования.',
                          'Выбрать и поддерживать определенный образ жизни важнее, чем добиваться успеха в карьере.','Я всегда хотел основать и построить свой собственный бизнес.',
                          'Я предпочитаю работу, которая не связана с командировками.'
                          ]
        # Проверяем порядок колонок
        order_main_columns = lst_check_cols  # порядок колонок и названий как должно быть
        order_temp_df_columns = list(answers_df.columns)  # порядок колонок проверяемого файла
        error_order_lst = []  # список для несовпадающих пар
        # Сравниваем попарно колонки
        for main, temp in zip(order_main_columns, order_temp_df_columns):
            if main != temp:
                error_order_lst.append(f'На месте колонки {main} находится колонка {temp}')
                error_order_message = ';'.join(error_order_lst)
        if len(error_order_lst) != 0:
            raise BadOrderCOK

        answers_df = answers_df.applymap(convert_to_int)  # приводим к инту

        # проверяем правильность
        valid_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        # Проверяем, есть ли значения, отличающиеся от указанных в списке
        lst_error_answers = []  # список для хранения строк где найдены неправильные ответы

        for i in range(41):
            mask = ~answers_df.iloc[:, i].isin(valid_values)  # проверяем на допустимые значения
            result_check = answers_df.iloc[:, i][mask]
            if len(result_check) != 0:
                error_row = list(map(lambda x: x + 2, result_check.index))
                error_row = list(map(str, error_row))
                error_row_lst = [f'В {i + 1} вопросной колонке на строке {value}' for value in error_row]
                error_in_column = ','.join(error_row_lst)
                lst_error_answers.append(error_in_column)

        if len(lst_error_answers) != 0:
            error_message = ';'.join(lst_error_answers)
            raise BadValueCOK


        # Создаем колонку для результатов первичного подсчета
        base_df[f'Распределение'] = answers_df.apply(processing_result_cok, axis=1)
        base_df[f'Ведущая_карьерная_ориентация'] = base_df[f'Распределение'].apply(
            extract_key_max_value)
        base_df[f'Значение_ведущая_карьерная_ориентация'] = base_df[f'Распределение'].apply(
            extract_max_value)
        base_df[f'Уровень_выраженности'] = base_df[f'Значение_ведущая_карьерная_ориентация'].apply(
            calc_level_cok)

        # Создаем датафрейм для создания части в общий датафрейм
        part_df = pd.DataFrame()
        part_df['ЦОК_Распределение'] = base_df['Распределение']
        part_df['ЦОК_Ведущая_ориентация'] = base_df['Ведущая_карьерная_ориентация']
        part_df['ЦОК_Ориентация_Значение'] = base_df['Значение_ведущая_карьерная_ориентация']
        part_df['ЦОК_Ориентация_Уровень'] = base_df['Уровень_выраженности']

        base_df.sort_values(by='Значение_ведущая_карьерная_ориентация', ascending=False, inplace=True)  # сортируем
        out_answer_df = pd.concat([out_answer_df, answers_df], axis=1)  # Датафрейм для проверки

        description_result = """
                 По каждой из девяти карьерных ориентаций подсчитывается количество баллов. Таким образом определяется ведущая карьерная ориентация - количество набранных для этого баллов должно быть не менее пяти. Иногда ведущей не становится ни одна карьерная ориентация - в таком случае карьера не является центральной в жизни личности.
    
                 1) Профессиональная компетентность -быть профессионалом, мастером в своем деле.
                 Эта ориентация связана с наличием способностей и талантов в определенной области.
                 Люди с такой ориентацией хотят быть мастерами своего дела, они бывают особенно счастливы, когда достигают успеха в профессиональной сфере, но быстро теряют интерес к работе, которая не позволяет развивать их способности. Вряд ли их заинтересует даже значительно более высокая должность, если она не связана с их профессиональными компетенциями. Они ищут признания своих талантов, что должно выражаться в статусе, соответствующем их мастерству. Они готовы управлять другими в пределах своей компетенции, но управление не представляет для них особого интереса. Поэтому многие из этой категории отвергают работу руководителя, управление рассматривают как необходимое условие для продвижения в своей профессиональной сфере.
                 2) Менеджмент - Управлять – людьми, проектами, бизнес-процессами и т.п.
                 Для этих людей первостепенное значение имеет ориентация личности на интеграцию усилий других людей, полнота ответственности за конечный результат и соединение различных функций организации. С возрастом и опытом эта карьерная ориентация проявляется сильнее. Возможности для лидерства, высокого дохода, повышенных уровней ответственности и вклад в успех своей организации являются ключевыми ценностями и мотивами. Самое главное для них – управление: людьми, проектами, любыми бизнес-процессами – это в целом не имеет принципиального значения. Центральное понятие их профессионального развития – власть, осознание того, что от них зависит принятие ключевых решений. Причем для них не является принципиальным управление собственным проектом или целым бизнесом, скорее наоборот, они в большей степени ориентированы на построение карьеры в наемном менеджменте, но при условии, что им будут делегированы значительные полномочия. Человек с такой ориентацией будет считать, что не достиг цели своей карьеры, пока не займет должность, на которой будет управлять различными сторонами деятельности предприятия.
                 3) Автономия (независимость) – Главное в работе – это свобода и независимость.
                 Первичная забота личности с такой ориентацией –освобождение от организационных правил, предписаний и ограничений. Они испытывают трудности, связанные с установленными правилами, процедурами, рабочим днем, дисциплиной, формой одежды и т.д. Они любят выполнять работу своим способом, темпом и по собственным стандартам. Они не любят, когда работа вмешивается в их частную жизнь, поэтому предпочитают делать независимую карьеру собственным путем. Они скорее выберут низкосортную работу, чем откажутся от автономии и независимости. Для них первоочередная задача развития карьеры – получить возможность работать самостоятельно, самому решать, как, когда и что делать для достижения тех или иных целей. Карьера для них – это, прежде всего, способ реализации их свободы, поэтому любые рамки и строгое подчинение оттолкнут их даже от внешне привлекательной вакансии. Такой человек может работать в организации, которая обеспечивает достаточную степень свободы.
                 4) Стабильность работы - стабильная, надежная работа на длительное время.
                 Эти люди испытывают потребность в безопасности, защите и возможности прогнозирования и будут искать постоянную работу с минимальной вероятностью увольнения. Эти люди отождествляют свою работу со своей карьерой. Их потребность в безопасности и стабильности ограничивает выбор вариантов	карьеры.
                 Авантюрные или краткосрочные проекты и только становящиеся на ноги компании их, скорее всего, не привлекают. Они очень ценят социальные гарантии, которые может предложить работодатель, и, как правило, их выбор места работы связан именно с длительным контрактом и стабильным положением компании на рынке. Такие люди ответственность за управление своей карьерой перекладывают на нанимателя. Часто данная ценностная ориентация сочетается с невысоким уровнем притязаний.
                 5) Стабильность места жительства - Главное – жить в своем городе (минимум переездов, командировок).
                 Важнее остаться на одном месте жительства, чем получить повышение или новую работу на новой местности. Переезд для таких людей неприемлем, и даже частые командировки являются для них негативным фактором при рассмотрении	предложения о работе.
                 6) Служение - Воплощать в работе свои идеалы и ценности.
                 Данная ценностная ориентация характерна для людей, занимающихся делом по причине желания реализовать в своей работе главные ценности. Они часто ориентированы больше на ценности, чем на требующиеся в данном виде работы способности. Они стремятся приносить пользу людям, обществу, для них очень важно видеть конкретные плоды своей работы, даже если они и не выражены в материальном эквиваленте. Основной тезис построения их карьеры – получить возможность максимально эффективно использовать их таланты и опыт для реализации общественно	важной цели. Люди, ориентированные на служение, общительны и часто консервативны. Человек с такой ориентацией не будет работать в организации, которая враждебна его целям и ценностям.
                 7) Вызов - Сделать   невозможное – возможным, решать   уникальные   задачи.
                 Эти люди считают успехом преодоление непреодолимых препятствий, решение неразрешимых проблем или просто выигрыш. Они ориентированы на то, чтобы “бросать вызов”. Для одних людей вызов представляет более трудная работа, для других это — конкуренция и межличностные отношения. Они ориентированы на решение заведомо сложных задач, преодоление препятствий ради победы в конкурентной борьбе. Они чувствуют себя преуспевающими только тогда, когда постоянно вовлечены в решение трудных проблем или в ситуацию соревнования. Карьера для них – это постоянный вызов их профессионализму, и они всегда готовы его принять. Социальная ситуация чаще всего рассматривается с позиции “выигрыша – проигрыша”. Процесс борьбы и победа более важна для них, чем конкретная область деятельности или квалификация. Новизна, разнообразие и вызов имеют для них очень большую ценность, и, если все идет слишком просто, им становиться скучно.
                 8) Интеграция стилей жизни - Сохранение гармонии между сложившейся личной жизнью и карьерой.
                 Для людей этой категории карьера должна ассоциироваться с общим стилем жизни, уравновешивая потребности человека, семьи и карьеры. Они хотят, чтобы организационные отношения отражали бы уважение к их личным и семейным проблемам.
                 Выбирать и поддерживать определенный образ жизни для них важнее, чем добиваться успеха в карьере. Развитие карьеры их привлекает только в том случае, если она не нарушает привычный им стиль жизни и окружение. Для них важно, чтобы все было уравновешено – карьера, семья, личные интересы и т.п. Жертвовать   чем-то   одним   ради   другого   им    явно    не    свойственно. Такие люди обычно в своем поведении проявляют конформность (тенденция изменять свое поведение в зависимости от влияния других людей с тем, чтобы оно соответствовало мнению окружающих)
                 9) Предпринимательство – Создавать новые организации, товары, услуги.
                 Этим людям нравится создавать новые организации, товары или услуги, которые могут быть отождествлены с их усилиями. Работать на других – это не их, они – предприниматели по духу, и цель их карьеры – создать что-то новое, организовать свое дело, воплотить в жизнь идею, всецело принадлежащую только им. Вершина карьеры в их понимании – собственный бизнес.
                 """
        # создаем описание результата
        base_df[f'Описание_результата'] = 'Диагностика ценностных ориентаций в карьере.\n' + base_df[
            f'Распределение'] + description_result
        part_df['ЦОК_Описание_результата'] = base_df[f'Описание_результата']

        # Делаем свод по уровню
        dct_svod_level = {'Значение_ведущая_карьерная_ориентация': 'Уровень_выраженности',
                        }
        dct_rename_svod_level = {'Значение_ведущая_карьерная_ориентация': 'Уровень выраженности',
                               }
        # Списки для шкал
        lst_level = ['не выраженная карьерная ориентация', 'выраженная карьерная ориентация'
                    ]
        base_svod_level_df = create_union_svod(base_df, dct_svod_level, dct_rename_svod_level, lst_level)

        # Делаем свод по сфере
        dct_svod_sphere = {'Значение_ведущая_карьерная_ориентация': 'Ведущая_карьерная_ориентация',
                        }

        dct_rename_svod_sphere = {'Значение_ведущая_карьерная_ориентация': 'Ведущая карьерная ориентация',
                               }

        # Списки для шкал
        lst_sphere = ['Профессиональная компетентность', 'Менеджмент','Автономия (независимость)','Стабильность работы',
                     'Стабильность места жительства','Служение','Вызов','Интеграция стилей жизни','Предпринимательство',
                    ]

        base_svod_sphere_df = create_union_svod(base_df, dct_svod_sphere, dct_rename_svod_sphere, lst_sphere)

        # считаем среднее значение
        avg_car_orient = round(base_df['Значение_ведущая_карьерная_ориентация'].mean(), 2)

        avg_dct = {'Среднее значение Ведущая карьерная ориентация': avg_car_orient,
                   }

        avg_df = pd.DataFrame.from_dict(avg_dct, orient='index')
        avg_df = avg_df.reset_index()
        avg_df.columns = ['Показатель', 'Среднее значение']

        # формируем основной словарь
        out_dct = {'Списочный результат': base_df, 'Список для проверки': out_answer_df,
                   'Среднее': avg_df,
                   'Свод по уровням': base_svod_level_df,
                   }

        # Листы по уровням
        dct_level = dict()
        for level in lst_level:
            temp_df = base_df[base_df['Уровень_выраженности'] == level]
            if temp_df.shape[0] != 0:
                if level == 'не выраженная карьерная ориентация':
                    level = 'не выражена'
                elif level == 'выраженная карьерная ориентация':
                    level = 'выражена'
                dct_level[level] = temp_df
        out_dct.update(dct_level)

        # Добавляем свод по сферам
        out_dct.update({
                   'Свод по ориентациям': base_svod_sphere_df,
                   })
        # Листы по сферам
        dct_sphere = dict()
        for sphere in lst_sphere:
            temp_df = base_df[base_df['Ведущая_карьерная_ориентация'] == sphere]
            if temp_df.shape[0] != 0:
                dct_sphere[sphere] = temp_df
        out_dct.update(dct_sphere)

        """
            Сохраняем в зависимости от необходимости делать своды по определенным колонкам
            """
        if len(lst_svod_cols) == 0:
            return out_dct, part_df
        else:
            out_dct = create_result_shein_cok(base_df, out_dct, lst_svod_cols)

            return out_dct, part_df

    except BadValueCOK:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Ценностные ориентиры карьеры обнаружены неправильные варианты ответов. Проверьте ответы на указанных строках:\n'
                             f'{error_message}\n'
                             f'Используйте при создании Яндекс-формы написание вариантов ответа из руководства пользователя программы Лахесис.')


    except BadCountColumnsCOK:
        messagebox.showerror('Лахеcис',
                             f'Проверьте количество колонок с ответами на тест Ценностные ориентиры карьеры\n'
                             f'Должна быть 41 колонка с ответами')













