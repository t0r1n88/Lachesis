"""
Скритп для обработки результатов теста Профессиональная идентичность Азбель
"""
import pandas as pd
import re
from tkinter import messagebox
from lachesis_support_functions import round_mean, create_union_svod,calc_count_scale


class BadOrderPIA(Exception):
    """
    Исключение для обработки случая когда колонки не совпадают
    """
    pass




class BadValuePIA(Exception):
    """
    Исключение для неправильных значений в вариантах ответов
    """
    pass


class BadCountColumnsPIA(Exception):
    """
    Исключение для обработки случая если количество колонок не равно 20
    """
    pass

def extract_key_max_value(cell:str) ->str:
    """
    Функция для извлечения ключа с максимальным значением
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return cell
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return max(dct_result, key=dct_result.get)

def extract_max_value(cell:str):
    """
    Функция для извлечения значения ключа с максимальным значением , ха звучит странно
    :param cell: строка формата ключ - значение;
    :return: ключ словаря в формате строки
    """
    # проверяем если некорректное значение
    if 'Скопируйте правильные значения для указанных вопросов из квадратных скобок' in cell:
        return 0
    dct_result = {}
    cell = cell.replace('\n','') # убираем переносы
    lst_temp = cell.split(';') # сплитим по точке с запятой
    for result in lst_temp:
        # отбрасываем пустую строку
        if result:
            key,value = result.split(': ') # извлекаем ключ и значение
            dct_result[key] = int(value)

    # возвращаем элемент с максимальным значением
    return dct_result[max(dct_result, key=dct_result.get)]



def processing_result_pia(row):
    """
    Обработка результатов тестирования
    """

    # Создаем словарь для хранения данных
    dct_type = {'Неопределенное состояние профессиональной идентичности': 0,
                'Навязанная профессиональная идентичность': 0,
                'Мораторий (кризис выбора)': 0,
                'Сформированная профессиональная идентичность': 0}

    # 1
    if row[0] == 'Согласен, еще не пришло время решать, где мне дальше учиться или работать':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 2
    elif row[0] == 'Согласен, я уверен, что мои родители помогут мне в моем профессиональном будущем':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[0] == 'Не согласен, ведь если о будущем не беспокоиться сейчас, то потом будет слишком поздно':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[0] == 'Согласен, так как я уже давно все решил по поводу своего профессионального будущего, и нет смысла беспокоиться':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 2
    if row[1] == 'Не согласен, поскольку еще пока не задумывался над этой проблемой':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[1] == 'Согласен, поэтому я лучше прислушаюсь к мнению авторитетного человека (родителя, хорошего знакомого, друга)':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[1] == 'Согласен, так как меня интересует сразу несколько специальностей, которые хотелось бы получить':
        dct_type['Мораторий (кризис выбора)'] += 2
    elif row[1] == 'Не согласен, я уже принял решение о том, где я буду учиться или работать в дальнейшем':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 3
    if row[2] == 'Не согласен, так как время анализировать спрос на профессии еще не пришло':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[2] == 'Не согласен, поскольку родители знают лучше, какую специальность мне предложить':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[2] == 'Согласен, ведь от спроса на рынке труда зависит, какую специальность я выберу':
        dct_type['Мораторий (кризис выбора)'] += 2
    elif row[2] == 'Не согласен, я уже решил, что все равно получу ту специальность, которую я хочу':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 4
    if row[3] == 'Согласен, у нас в семье не принято обсуждать мои профессиональные планы':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[3] == 'Согласен, так как моими родителями уже давно решено, кем я буду, и со мной не советовались по данному вопросу':
        dct_type['Навязанная профессиональная идентичность'] += 2
    elif row[3] == 'Не согласен, мои родители как раз постоянно со мной обсуждают мои профессиональные предпочтения':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[3] == 'Не согласен, мы с родителями давно все обсудили, и я принял решение по поводу своей будущей профессии':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 5
    if row[4] == 'Не согласен, поскольку родители не вмешиваются в мои проблемы с выбором профессии':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[4] == 'Согласен, и надо признать, что они вообще лучше меня разбираются в этом вопросе':
        dct_type['Навязанная профессиональная идентичность'] += 2
    elif row[4] == 'Не согласен, но мы регулярно обсуждаем вопрос моей будущей специальности':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[4] == 'Не согласен, так как выбор специальности был скорее моим самостоятельным решением, чем их':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 6
    if row[5] == 'Не согласен, так как у меня пока отсутствуют профессиональные планы':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[5] == 'Согласен, так как выстроить их мне помогли родители (знакомые), которые являются специалистами в этой профессиональной области':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[5] == 'Не согласен, но как раз сейчас я пытаюсь выстроить эти профессиональные планы':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[5] == 'Согласен, поскольку я построил их самостоятельно, основываясь на собственном жизненном опыте':
        dct_type['Сформированная профессиональная идентичность'] += 2

    # 7
    if row[6] == 'Не согласен, у моих родителей никогда не возникало желания ставить мне профессиональные цели':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[6] == 'Согласен, поскольку мои родители с детства говорили мне, кем я должен стать':
        dct_type['Навязанная профессиональная идентичность'] += 2
    elif row[6] == 'Согласен, цели еще сформулированы слабо, но окончательное решение будет все-таки принято мной, а не родителями':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[6] == 'Согласен, так как родители, конечно, приняли участие в обсуждении этого вопроса, но все-таки решение уже принято мной самостоятельно':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 8
    if row[7] == 'Согласен, мне и раньше в жизни не приходилось сталкиваться с вопросами построения карьеры':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 2
    elif row[7] == 'Согласен, так как моя карьера все равно будет зависеть от решения моей семьи':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[7] == 'Не согласен, уже настал тот момент, когда нужно выбирать направление своей дальнейшей карьеры':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[7] == 'Не согласен, я уже давно и точно решил, каким образом я буду выстраивать свою карьеру':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 9
    if row[8] == 'Не согласен, так как я еще не думал над своей конкретной специальностью':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[8] == 'Согласен, так как мои родители уже сообщили мне, на кого и где я буду дальше учиться':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[8] == 'Не согласен, мне трудно понять, какая специальность подходит именно мне':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[8] == 'Согласен, и я могу точно назвать учебное заведение и специальность, которую я получу':
        dct_type['Сформированная профессиональная идентичность'] += 2

    # 10
    if row[9] == 'Не согласен, так как обдумывать свою будущую карьеру нам с друзьями некогда, у нас есть много более интересных дел':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[9] == 'Согласен, и я собираюсь вместе с другом получить одинаковое образование, прислушавшись к его мнению':
        dct_type['Навязанная профессиональная идентичность'] += 2
    elif row[9] == 'Согласен, мы с ними часто обсуждаем этот вопрос, но я пытаюсь строить свои профессиональные планы самостоятельно':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[9] == 'Не согласен, я уже принял решение относительно своего будущего, без помощи друзей':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 11
    if row[10] == 'Согласен, поскольку профессиональная учеба не главное в жизни':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 2
    elif row[10] == 'Согласен, поскольку уверен, что родители все равно «устроят» меня на хорошую работу после учебы':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[10] == 'Не согласен, так как от выбора учебного заведения зависит качество моего образования':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[10] == 'Согласен, так как для меня главное получить специальность, о которой давно мечтаешь, а не конкретное место учебы':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 12
    if row[11] == 'Не согласен, так как мои родители все равно не хотят и не могут мне ничего посоветовать':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[11] == 'Согласен, поскольку мои родители с детства помогают мне, контролируя многие события в моей жизни, в том числе и в плане выбора профессии':
        dct_type['Навязанная профессиональная идентичность'] += 2
    elif row[11] == 'Согласен, я делаю попытки сориентироваться в профессиональной жизни, но пока затрудняюсь выбрать что-то одно':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[11] == 'Не согласен, свои решения по этому вопросу я уже принял абсолютно самостоятельно':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 13
    if row[12] == 'Согласен, думаю мне еще рано над этим размышлять':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 2
    elif row[12] == 'Согласен, так как я знаю, мои родители сделают так, чтобы у меня в жизни все устроилось отлично':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[12] == 'Не согласен, над этой проблемой я думаю довольно часто':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[12] == 'Согласен, так как я все уже решил для себя и сейчас концентрирую свое внимание на других проблемах':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 14
    if row[13] == 'Не согласен, иногда мне кажется, что я сам не знаю, чего я хочу от будущего':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[13] == 'Не согласен, так как мои родители уже определили меня в конкретное учебное заведение, где я дальше и буду учиться':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[13] == 'Согласен, я как раз выбираю одно из профессиональных учебных заведений':
        dct_type['Мораторий (кризис выбора)'] += 2
    elif row[13] == 'Не согласен, я сам хочу учиться только в одном, вполне определенном учебном заведении':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 15
    if row[14] == 'Не согласен, у меня пока еще нет профессиональных целей':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[14] == 'Согласен, поскольку знаю, что мои родители сделают все, чтобы эти цели осуществились':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[14] == 'Не согласен, я еще не до конца понимаю, в чем состоят эти цели':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[14] == 'Согласен, так как я хорошо осознаю свои профессиональные цели и стремлюсь к ним':
        dct_type['Сформированная профессиональная идентичность'] += 2

    # 16
    if row[15] == 'Не согласен, так как мои родители не особо интересуются вопросом моей карьеры':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[15] == 'Не согласен, поскольку мои родители по этому вопросу все уже решили, и с ними уже бесполезно спорить':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[15] == 'Согласен, я советуюсь с родителями, хотя иногда наши взгляды относительно моего будущего могут расходиться':
        dct_type['Мораторий (кризис выбора)'] += 2
    elif row[15] == 'Не согласен, ведь по поводу карьеры я все уже решил сам, и спорить со мной все равно бесполезно':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 17
    if row[16] == 'Согласен, меня вообще мало интересует информация о том, где и как можно выстраивать карьеру':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 2
    elif row[16] == 'Согласен, так как мои родители уже выбрали мне будущую сферу деятельности, и нет надобности собирать какую-либо дополнительную информацию':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[16] == 'Не согласен, я как раз сейчас активно анализирую возможности карьерного роста в различных областях деятельности':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[16] == 'Согласен, потому что я уже принял решение о том, кем я буду и где буду учиться':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 18
    if row[17] == 'Не согласен, я о них пока еще не задумывался':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[17] == 'Согласен, но они были определены заранее моими родителями':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[17] == 'Согласен, таких целей пока несколько, и я не решил, какая из них для меня основная':
        dct_type['Мораторий (кризис выбора)'] += 2
    elif row[17] == 'Не согласен, у меня всего одна профессиональная цель':
        dct_type['Сформированная профессиональная идентичность'] += 1

    # 19
    if row[18] == 'Не согласен, так как мне не хочется вникать, какая карьера подходит именно мне, у меня есть и более важные проблемы':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[18] == 'Не согласен, но я уверен, что мои родители устроят меня на хорошую работу, где карьера мне будет обеспечена':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[18] == 'Не согласен, пока мое профессиональное будущее – это множество альтернативных вариантов выбора':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[18] == 'Согласен, и я уже могу назвать основные шаги моей профессиональной жизни':
        dct_type['Сформированная профессиональная идентичность'] += 2

    # 20
    if row[19] == 'Не согласен, потому что мои родители вообще не участвуют в моем профессиональном выборе':
        dct_type['Неопределенное состояние профессиональной идентичности'] += 1
    elif row[19] == 'Не согласен, так как родители считают, что при самостоятельном выборе я могу ошибиться':
        dct_type['Навязанная профессиональная идентичность'] += 1
    elif row[19] == 'Согласен, но мы все равно еще обсуждаем мой профессиональный выбор':
        dct_type['Мораторий (кризис выбора)'] += 1
    elif row[19] == 'Согласен, и я уже сделал свой профессиональный выбор':
        dct_type['Сформированная профессиональная идентичность'] += 2

    # сортируем по убыванию
    result_lst = sorted(dct_type.items(), key=lambda t: t[1], reverse=True)
    begin_str = '\n'
    # создаем строку с результатами
    for sphere, value in result_lst:
        begin_str += f'{sphere}: {value};\n'

    # добавляем описание
    return begin_str


def calc_level_pia(row):
    """
    Функция для подсчета уровня склонности
    """
    if row[0] == 'Неопределенное состояние профессиональной идентичности':
        if 0 <= row[1] <= 3:
            return 'статус не выражен'
        elif 4 <=  row[1] <= 7:
            return 'выраженность ниже среднего уровня'
        elif 8 <=  row[1] <= 11:
            return 'средняя степень выраженности'
        elif 12 <=  row[1] <= 15:
            return 'выраженность выше среднего уровня'
        elif 16 <=  row[1]:
            return 'ярко выраженный статус'

    elif row[0] == 'Навязанная профессиональная идентичность':
        if 0 <= row[1] <= 4:
            return 'статус не выражен'
        elif 5 <=  row[1] <= 9:
            return 'выраженность ниже среднего уровня'
        elif 10 <=  row[1] <= 14:
            return 'средняя степень выраженности'
        elif 15 <=  row[1] <= 19:
            return 'выраженность выше среднего уровня'
        elif 20 <=  row[1]:
            return 'ярко выраженный статус'

    elif row[0] == 'Мораторий (кризис выбора)':
        if 0 <= row[1] <= 4:
            return 'статус не выражен'
        elif 5 <=  row[1] <= 9:
            return 'выраженность ниже среднего уровня'
        elif 10 <=  row[1] <= 14:
            return 'средняя степень выраженности'
        elif 15 <=  row[1] <= 19:
            return 'выраженность выше среднего уровня'
        elif 20 <=  row[1]:
            return 'ярко выраженный статус'

    elif row[0] == 'Сформированная профессиональная идентичность':
        if 0 <= row[1] <= 2:
            return 'статус не выражен'
        elif 3 <=  row[1] <= 5:
            return 'выраженность ниже среднего уровня'
        elif 6 <=  row[1] <= 8:
            return 'средняя степень выраженности'
        elif 9 <=  row[1] <= 11:
            return 'выраженность выше среднего уровня'
        elif 12 <=  row[1]:
            return 'ярко выраженный статус'


def create_result_azbel_prof_identity(base_df:pd.DataFrame, out_dct:dict, lst_svod_cols:list):
    """
    Функция для подсчета результата если указаны колонки по которым нужно провести свод
    :param df: датафрейм с результатами
    :param out_dct: словарь с уже подсчитанными базовыми данными
    :param lst_svod_cols: список сводных колонок
    :return: словарь
    """
    lst_level = ['статус не выражен', 'выраженность ниже среднего уровня',
                 'средняя степень выраженности',
                 'выраженность выше среднего уровня', 'ярко выраженный статус'
                 ]

    lst_sphere = ['Неопределенное состояние профессиональной идентичности',
                  'Навязанная профессиональная идентичность',
                  'Мораторий (кризис выбора)',
                  'Сформированная профессиональная идентичность'
                  ]

    lst_reindex_one_level_cols = lst_svod_cols.copy()
    lst_reindex_one_level_cols.extend( ['статус не выражен', 'выраженность ниже среднего уровня',
             'средняя степень выраженности',
             'выраженность выше среднего уровня', 'ярко выраженный статус',
                                                      'Итого'])

    lst_reindex_one_sphere_cols = lst_svod_cols.copy()
    lst_reindex_one_sphere_cols.extend( ['Неопределенное состояние профессиональной идентичности',
              'Навязанная профессиональная идентичность',
              'Мораторий (кризис выбора)',
              'Сформированная профессиональная идентичность','Итого'])

    svod_count_one_level_df = calc_count_scale(base_df, lst_svod_cols,
                                               'Значение_ведущей_идентичности',
                                               'Уровень_выраженности',
                                               lst_reindex_one_level_cols, lst_level)

    svod_count_one_sphere_df = calc_count_scale(base_df, lst_svod_cols,
                                                'Значение_ведущей_идентичности',
                                                'Ведущая_идентичность',
                                                lst_reindex_one_sphere_cols, lst_sphere)

    # Считаем среднее по субшкалам
    svod_mean_one_df = pd.pivot_table(base_df,
                                      index=lst_svod_cols,
                                      values=['Значение_ведущей_идентичности',
                                              ],
                                      aggfunc=round_mean)
    svod_mean_one_df.reset_index(inplace=True)
    # упорядочиваем колонки
    new_order_cols = lst_svod_cols.copy()
    new_order_cols.extend((['Значение_ведущей_идентичности',
                            ]))
    svod_mean_one_df = svod_mean_one_df.reindex(columns=new_order_cols)

    dct_rename_cols_mean = {'Значение_ведущей_идентичности': 'Среднее значение ведущей идентичности',
                            }
    svod_mean_one_df.rename(columns=dct_rename_cols_mean, inplace=True)

    # очищаем название колонки по которой делали свод
    out_name_lst = []

    for name_col in lst_svod_cols:
        name = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_col)
        if len(lst_svod_cols) == 1:
            out_name_lst.append(name[:14])
        elif len(lst_svod_cols) == 2:
            out_name_lst.append(name[:7])
        else:
            out_name_lst.append(name[:4])

    out_name = ' '.join(out_name_lst)
    if len(out_name) > 14:
        out_name = out_name[:14]

    out_dct.update({f'Ср {out_name}': svod_mean_one_df,
                    f'Уровень {out_name}': svod_count_one_level_df,
                    f'Иден-ть {out_name}': svod_count_one_sphere_df,
                    })

    if len(lst_svod_cols) == 1:
        return out_dct
    else:
        for idx, name_column in enumerate(lst_svod_cols):
            lst_reindex_column_level_cols = [lst_svod_cols[idx], 'статус не выражен', 'выраженность ниже среднего уровня',
             'средняя степень выраженности',
             'выраженность выше среднего уровня', 'ярко выраженный статус',
                                             'Итого']

            lst_reindex_column_sphere_cols = [lst_svod_cols[idx], 'Неопределенное состояние профессиональной идентичности',
              'Навязанная профессиональная идентичность',
              'Мораторий (кризис выбора)',
              'Сформированная профессиональная идентичность','Итого']

            svod_count_column_level_df = calc_count_scale(base_df, lst_svod_cols[idx],
                                                          'Значение_ведущей_идентичности',
                                                          'Уровень_выраженности',
                                                          lst_reindex_column_level_cols, lst_level)

            svod_count_column_sphere_df = calc_count_scale(base_df, lst_svod_cols[idx],
                                                           'Значение_ведущей_идентичности',
                                                           'Ведущая_идентичность',
                                                           lst_reindex_column_sphere_cols, lst_sphere)

            # Считаем среднее по субшкалам
            svod_mean_column_df = pd.pivot_table(base_df,
                                                 index=[lst_svod_cols[idx]],
                                                 values=['Значение_ведущей_идентичности',
                                                         ],
                                                 aggfunc=round_mean)
            svod_mean_column_df.reset_index(inplace=True)
            # упорядочиваем колонки
            new_order_cols = [lst_svod_cols[idx]].copy()
            new_order_cols.extend((['Значение_ведущей_идентичности',
                                    ]))
            svod_mean_column_df = svod_mean_column_df.reindex(columns=new_order_cols)

            dct_rename_cols_mean = {'Значение_ведущей_идентичности': 'Среднее значение ведущей идентичности',
                                    }
            svod_mean_column_df.rename(columns=dct_rename_cols_mean, inplace=True)

            name_column = lst_svod_cols[idx]
            name_column = re.sub(r'[\[\]\'+()<> :"?*|\\/]', '_', name_column)
            name_column = name_column[:15]

            out_dct.update({f'Ср {name_column}': svod_mean_column_df,
                            f'Уровень {name_column}': svod_count_column_level_df,
                            f'Иден-ть {name_column}': svod_count_column_sphere_df,
                            })
        return out_dct


def processing_azbel_prof_identity(base_df: pd.DataFrame, answers_df: pd.DataFrame,lst_svod_cols:list):
    """
    Функция для обработки
    :param base_df: часть датафрейма с описательными колонками
    :param answers_df: часть датафрейма с ответами
    :param lst_svod_cols:  список с колонками по которым нужно делать свод
    """
    try:

        out_answer_df = base_df.copy()  # делаем копию для последующего соединения с сырыми ответами
        if answers_df.shape[1] != 20:
            raise BadCountColumnsPIA

        # очищаем названия колонок от возможных сочетаний .1 которые добавляет пандас при одинаковых колонках
        clean_df_lst = []
        for name_column in answers_df.columns:
            clean_name = re.sub(r'.\d+$', '', name_column)
            clean_df_lst.append(clean_name)

        answers_df.columns = clean_df_lst

        lst_check_cols = ['Меня не беспокоит мое профессиональное будущее',
                          'Мне трудно принять решение, куда пойти получать дальнейшее образование',
                          'Я регулярно изучаю спрос на представителей той специальности, которую я планирую получить',
                          'Я до сих пор не обсуждал с родителями свои будущие профессиональные планы',
                          'Мои родители выбрали мне будущую специальность',
                          'Мне хорошо ясны свои будущие профессиональные планы',
                          'На мои профессиональные цели сильно влияет мнение моих родителей',
                          'Думаю, мне еще слишком рано задумываться над вопросами построения своей карьеры',
                          'Уже точно решено, какую специальность я хочу получить после окончания школы',
                          'Друзья советуют мне, какое образование лучше получить',
                          'Для меня не принципиально, где именно учиться в дальнейшем',
                          'Я боюсь без совета своих родителей принимать ответственные решения по поводу моей дальнейшей профессиональной деятельности',
                          'Я не часто думаю над своим профессиональным будущим',
                          'У меня на примете несколько учебных заведений, куда я мог бы пойти учиться',
                          'Никакие жизненные проблемы не смогут мне помешать достигнуть поставленных профессиональных целей',
                          'У нас дома часто разгораются бурные дискуссии по поводу моей будущей карьеры',
                          'Меня мало интересует информация о том, как выстраивать карьеру в различных профессиональных областях',
                          'Я держу на примете несколько профессиональных целей',
                          'Я очень хорошо представляю свой дальнейший карьерный рост',
                          'Родители предоставили мне возможность сделать свой профессиональный выбор самостоятельно',
                          ]

        # Проверяем порядок колонок
        order_main_columns = lst_check_cols  # порядок колонок и названий как должно быть
        order_temp_df_columns = list(answers_df.columns)  # порядок колонок проверяемого файла
        error_order_lst = []  # список для несовпадающих пар
        # Сравниваем попарно колонки
        for main, temp in zip(order_main_columns, order_temp_df_columns):
            if main != temp:
                error_order_lst.append(f'На месте колонки {main} находится колонка {temp}')
                error_order_message = ';'.join(error_order_lst)
        if len(error_order_lst) != 0:
            raise BadOrderPIA

        # делаем список списков
        valid_values = [['Согласен, еще не пришло время решать, где мне дальше учиться или работать',
                         'Согласен, я уверен, что мои родители помогут мне в моем профессиональном будущем',
                         'Согласен, так как я уже давно все решил по поводу своего профессионального будущего, и нет смысла беспокоиться',
                         'Не согласен, ведь если о будущем не беспокоиться сейчас, то потом будет слишком поздно'],
                        ['Согласен, так как меня интересует сразу несколько специальностей, которые хотелось бы получить',
                         'Согласен, поэтому я лучше прислушаюсь к мнению авторитетного человека (родителя, хорошего знакомого, друга)',
                         'Не согласен, я уже принял решение о том, где я буду учиться или работать в дальнейшем',
                         'Не согласен, поскольку еще пока не задумывался над этой проблемой'],
                        ['Согласен, ведь от спроса на рынке труда зависит, какую специальность я выберу',
                         'Не согласен, поскольку родители знают лучше, какую специальность мне предложить',
                         'Не согласен, так как время анализировать спрос на профессии еще не пришло',
                         'Не согласен, я уже решил, что все равно получу ту специальность, которую я хочу'],
                        [
                            'Согласен, так как моими родителями уже давно решено, кем я буду, и со мной не советовались по данному вопросу',
                            'Не согласен, мои родители как раз постоянно со мной обсуждают мои профессиональные предпочтения',
                            'Согласен, у нас в семье не принято обсуждать мои профессиональные планы',
                            'Не согласен, мы с родителями давно все обсудили, и я принял решение по поводу своей будущей профессии'],
                        ['Согласен, и надо признать, что они вообще лучше меня разбираются в этом вопросе',
                         'Не согласен, но мы регулярно обсуждаем вопрос моей будущей специальности',
                         'Не согласен, поскольку родители не вмешиваются в мои проблемы с выбором профессии',
                         'Не согласен, так как выбор специальности был скорее моим самостоятельным решением, чем их'],
                        [
                            'Согласен, так как выстроить их мне помогли родители (знакомые), которые являются специалистами в этой профессиональной области',
                            'Согласен, поскольку я построил их самостоятельно, основываясь на собственном жизненном опыте',
                            'Не согласен, так как у меня пока отсутствуют профессиональные планы',
                            'Не согласен, но как раз сейчас я пытаюсь выстроить эти профессиональные планы'],
                        ['Не согласен, у моих родителей никогда не возникало желания ставить мне профессиональные цели',
                         'Согласен, поскольку мои родители с детства говорили мне, кем я должен стать',
                         'Согласен, цели еще сформулированы слабо, но окончательное решение будет все-таки принято мной, а не родителями',
                         'Согласен, так как родители, конечно, приняли участие в обсуждении этого вопроса, но все-таки решение уже принято мной самостоятельно'],
                        ['Согласен, так как моя карьера все равно будет зависеть от решения моей семьи',
                         'Согласен, мне и раньше в жизни не приходилось сталкиваться с вопросами построения карьеры',
                         'Не согласен, уже настал тот момент, когда нужно выбирать направление своей дальнейшей карьеры',
                         'Не согласен, я уже давно и точно решил, каким образом я буду выстраивать свою карьеру'],
                        ['Не согласен, так как я еще не думал над своей конкретной специальностью',
                         'Согласен, и я могу точно назвать учебное заведение и специальность, которую я получу',
                         'Согласен, так как мои родители уже сообщили мне, на кого и где я буду дальше учиться',
                         'Не согласен, мне трудно понять, какая специальность подходит именно мне'],
                        [
                            'Согласен, мы с ними часто обсуждаем этот вопрос, но я пытаюсь строить свои профессиональные планы самостоятельно',
                            'Согласен, и я собираюсь вместе с другом получить одинаковое образование, прислушавшись к его мнению',
                            'Не согласен, так как обдумывать свою будущую карьеру нам с друзьями некогда, у нас есть много более интересных дел',
                            'Не согласен, я уже принял решение относительно своего будущего, без помощи друзей'],
                        [
                            'Согласен, так как для меня главное получить специальность, о которой давно мечтаешь, а не конкретное место учебы',
                            'Согласен, поскольку уверен, что родители все равно «устроят» меня на хорошую работу после учебы',
                            'Согласен, поскольку профессиональная учеба не главное в жизни',
                            'Не согласен, так как от выбора учебного заведения зависит качество моего образования'],
                        [
                            'Согласен, я делаю попытки сориентироваться в профессиональной жизни, но пока затрудняюсь выбрать что-то одно',
                            'Не согласен, так как мои родители все равно не хотят и не могут мне ничего посоветовать',
                            'Согласен, поскольку мои родители с детства помогают мне, контролируя многие события в моей жизни, в том числе и в плане выбора профессии',
                            'Не согласен, свои решения по этому вопросу я уже принял абсолютно самостоятельно'],
                        ['Не согласен, над этой проблемой я думаю довольно часто',
                         'Согласен, так как я знаю, мои родители сделают так, чтобы у меня в жизни все устроилось отлично',
                         'Согласен, думаю мне еще рано над этим размышлять',
                         'Согласен, так как я все уже решил для себя и сейчас концентрирую свое внимание на других проблемах'],
                        [
                            'Не согласен, так как мои родители уже определили меня в конкретное учебное заведение, где я дальше и буду учиться',
                            'Не согласен, я сам хочу учиться только в одном, вполне определенном учебном заведении',
                            'Согласен, я как раз выбираю одно из профессиональных учебных заведений',
                            'Не согласен, иногда мне кажется, что я сам не знаю, чего я хочу от будущего'],
                        ['Согласен, поскольку знаю, что мои родители сделают все, чтобы эти цели осуществились',
                         'Не согласен, у меня пока еще нет профессиональных целей',
                         'Согласен, так как я хорошо осознаю свои профессиональные цели и стремлюсь к ним',
                         'Не согласен, я еще не до конца понимаю, в чем состоят эти цели'],
                        [
                            'Не согласен, поскольку мои родители по этому вопросу все уже решили, и с ними уже бесполезно спорить',
                            'Не согласен, так как мои родители не особо интересуются вопросом моей карьеры',
                            'Не согласен, ведь по поводу карьеры я все уже решил сам, и спорить со мной все равно бесполезно',
                            'Согласен, я советуюсь с родителями, хотя иногда наши взгляды относительно моего будущего могут расходиться'],
                        [
                            'Согласен, так как мои родители уже выбрали мне будущую сферу деятельности, и нет надобности собирать какую-либо дополнительную информацию',
                            'Согласен, потому что я уже принял решение о том, кем я буду и где буду учиться',
                            'Не согласен, я как раз сейчас активно анализирую возможности карьерного роста в различных областях деятельности',
                            'Согласен, меня вообще мало интересует информация о том, где и как можно выстраивать карьеру'],
                        ['Согласен, но они были определены заранее моими родителями',
                         'Не согласен, у меня всего одна профессиональная цель',
                         'Не согласен, я о них пока еще не задумывался',
                         'Согласен, таких целей пока несколько, и я не решил, какая из них для меня основная'],
                        ['Не согласен, пока мое профессиональное будущее – это множество альтернативных вариантов выбора',
                         'Не согласен, но я уверен, что мои родители устроят меня на хорошую работу, где карьера мне будет обеспечена',
                         'Не согласен, так как мне не хочется вникать, какая карьера подходит именно мне, у меня есть и более важные проблемы',
                         'Согласен, и я уже могу назвать основные шаги моей профессиональной жизни'],
                        ['Не согласен, потому что мои родители вообще не участвуют в моем профессиональном выборе',
                         'Согласен, но мы все равно еще обсуждаем мой профессиональный выбор',
                         'Не согласен, так как родители считают, что при самостоятельном выборе я могу ошибиться',
                         'Согласен, и я уже сделал свой профессиональный выбор']
                        ]
        lst_error_answers = []  # список для хранения строк где найдены неправильные ответы

        for idx, lst_values in enumerate(valid_values):
            mask = ~answers_df.iloc[:, idx].isin(lst_values)  # проверяем на допустимые значения
            # Получаем строки с отличающимися значениями
            result_check = answers_df.iloc[:, idx][mask]

            if len(result_check) != 0:
                error_row = list(map(lambda x: x + 2, result_check.index))
                error_row = list(map(str, error_row))
                error_row_lst = [f'В {idx + 1} вопросной колонке на строке {value}' for value in error_row]
                error_in_column = ','.join(error_row_lst)
                lst_error_answers.append(error_in_column)

        if len(lst_error_answers) != 0:
            error_message = ';'.join(lst_error_answers)

        base_df[f'Распределение'] = answers_df.apply(processing_result_pia, axis=1)
        base_df[f'Ведущая_идентичность'] = base_df[f'Распределение'].apply(
            extract_key_max_value)
        base_df[f'Значение_ведущей_идентичности'] = base_df[f'Распределение'].apply(
            extract_max_value)
        base_df[f'Уровень_выраженности'] = base_df[['Ведущая_идентичность', 'Значение_ведущей_идентичности']].apply(lambda x: calc_level_pia(x), axis=1)

        # Создаем датафрейм для создания части в общий датафрейм
        part_df = pd.DataFrame()
        part_df['ПИА_Распределение'] = base_df['Распределение']
        part_df['ПИА_Ведущая_идентичность'] = base_df['Ведущая_идентичность']
        part_df['ПИА_Идентичность_Значение'] = base_df['Значение_ведущей_идентичности']
        part_df['ПИА_Идентичность_Уровень'] = base_df['Уровень_выраженности']

        base_df.sort_values(by='Значение_ведущей_идентичности', ascending=False, inplace=True)  # сортируем
        out_answer_df = pd.concat([out_answer_df, answers_df], axis=1)  # Датафрейм для проверки

        # Создаем строку с описанием
        description_result = """
        Шкала оценки результатов
        Неопределенное состояние профессиональной идентичности:
        16 и более - ярко выраженный статус;
        12-15 баллов – выраженность выше среднего уровня;
        8-11 баллов – средняя степень выраженности;
        4-7 баллов – выраженность ниже среднего уровня;
        0-3 баллов – статус не выражен.
    
        Навязанная профессиональная идентичность:
        20 и более - ярко выраженный статус;
        15-19 баллов – выраженность выше среднего уровня;
        10-14 баллов – средняя степень выраженности;
        5-9 баллов – выраженность ниже среднего уровня;
        0-4 баллов – статус не выражен.
    
        Мораторий (кризис выбора):
        20 и более - ярко выраженный статус;
        15-19 баллов – выраженность выше среднего уровня;
        10-14 баллов – средняя степень выраженности;
        5-9 баллов – выраженность ниже среднего уровня;
        0-4 баллов – статус не выражен.
    
        Сформированная профессиональная идентичность:
        12 и более - ярко выраженный статус;
        9-11 баллов – выраженность выше среднего уровня;
        6-8 баллов – средняя степень выраженности;
        3-5 баллов – выраженность ниже среднего уровня;
        0-2 баллов – статус не выражен.
    
        Описание статусов:
        Неопределенное состояние профессиональной идентичности:
        Состояние характерно для учащихся, которые не имеют прочных профессиональных целей и планов и при этом не пытаются их сформировать, выстроить варианты своего профессионального развития. Чаще всего этим статусом обладают подростки, родители которых не хотят или не имеют времени проявлять активный интерес к профессиональному будущему своих детей. Такой статус бывает и у подростков, привыкших жить текущими желаниями, недостаточно осознающих важность выбора будущей профессии.
    
        Навязанная профессиональная идентичность:
        Это состояние характерно для человека, который выбрал свой профессиональный путь, но не путем самостоятельных размышлений, а прислушавшись к мнению авторитетов: родителей или друзей. На какое-то время это, как правило, обеспечивает комфортное состояние, позволяя избежать переживаний по поводу собственного будущего. Но нет никакой гарантии, что выбранная таким путем профессия будет отвечать интересам и способностям самого человека. Поэтому такой выбор в дальнейшем вполне может привести к разочарованию.
    
        Мораторий (кризис выбора):
        Такое состояние характерно для человека, исследующего альтернативные варианты дальнейшего профессионального развития и активно пытающегося выйти из этого состояния, приняв осмысленное решение о своем будущем. Эти юноши и девушки размышляют о возможных вариантах профессионального развития, примеряют на себя различные профессиональные роли, стремятся как можно больше узнать о разных специальностях и путях их получения. На этой стадии нередко складываются неустойчивые отношения с родителями и друзьями: полное взаимопонимание может быстро сменяться непониманием, и наоборот. Как правило, большая часть людей после «кризиса выбора» переходит к состоянию сформированной идентичности, реже к навязанной идентичности.
    
        Сформированная профессиональная идентичность:
        Эти юноши и девушки характеризуются тем, что они готовы совершить осознанный выбор дальнейшего профессионального развития или уже его совершили. У них присутствует уверенность в правильности принятого решения об их профессиональном будущем. Этим статусом обладают те юноши и девушки, которые прошли через «кризис выбора» и самостоятельно сформировали систему знаний о себе, о профессиональных ценностях и жизненных убеждениях. Они могут осознанно выстраивать свою жизнь потому, что определились, чего хотят достигнуть.
                        """

        # создаем описание результата
        base_df[f'Описание_результата'] = 'Профессиональная идентичность.\nРезультат тестирования:\n' + base_df[
            f'Распределение'] + description_result
        part_df['ПИА_Описание_результата'] = base_df[f'Описание_результата']

        # Делаем свод по уровню
        dct_svod_level = {'Значение_ведущей_идентичности': 'Уровень_выраженности',
                          }
        dct_rename_svod_level = {'Значение_ведущей_идентичности': 'Количество',
                                 }
        # Списки для шкал
        lst_level = ['статус не выражен', 'выраженность ниже среднего уровня',
                     'средняя степень выраженности',
                     'выраженность выше среднего уровня','ярко выраженный статус'
                     ]
        base_svod_level_df = create_union_svod(base_df, dct_svod_level, dct_rename_svod_level, lst_level)

        # Делаем свод по сфере
        dct_svod_sphere = {'Значение_ведущей_идентичности': 'Ведущая_идентичность',
                           }

        dct_rename_svod_sphere = {'Значение_ведущей_идентичности': 'Количество',
                                  }

        # Списки для шкал
        lst_sphere = ['Неопределенное состояние профессиональной идентичности',
                      'Навязанная профессиональная идентичность',
                      'Мораторий (кризис выбора)',
                      'Сформированная профессиональная идентичность'
                      ]

        base_svod_sphere_df = create_union_svod(base_df, dct_svod_sphere, dct_rename_svod_sphere, lst_sphere)

        # считаем среднее значение
        avg_main = round(base_df['Значение_ведущей_идентичности'].mean(), 2)

        avg_dct = {'Среднее значение Ведущая идентичность': avg_main,
                   }

        avg_df = pd.DataFrame.from_dict(avg_dct, orient='index')
        avg_df = avg_df.reset_index()
        avg_df.columns = ['Показатель', 'Среднее значение']

        # формируем основной словарь
        out_dct = {'Списочный результат': base_df, 'Список для проверки': out_answer_df,
                   'Среднее': avg_df,
                   'Свод по уровням': base_svod_level_df,
                   }

        # Листы по уровням
        dct_level = dict()
        for level in lst_level:
            temp_df = base_df[base_df['Уровень_выраженности'] == level]
            if temp_df.shape[0] != 0:
                if level == 'выраженность ниже среднего уровня':
                    level = 'ниже среднего уровня'
                elif level == 'средняя степень выраженности':
                    level = 'средний уровень'
                elif level == 'выраженность выше среднего уровня':
                    level = 'выше среднего'
                elif level == 'ярко выраженный статус':
                    level = 'ярко выражена'
                dct_level[level] = temp_df
        out_dct.update(dct_level)

        # Добавляем свод по сферам
        out_dct.update({
            'Свод идентичность': base_svod_sphere_df,
        })
        # Листы по сферам
        dct_sphere = dict()
        for sphere in lst_sphere:
            temp_df = base_df[base_df['Ведущая_идентичность'] == sphere]
            if temp_df.shape[0] != 0:
                if sphere == 'Неопределенное состояние профессиональной идентичности':
                    sphere = 'неопределенное'
                elif sphere == 'Навязанная профессиональная идентичность':
                    sphere = 'навязанная'
                elif sphere == 'Мораторий (кризис выбора)':
                    sphere = 'мораторий'
                elif sphere == 'Сформированная профессиональная идентичность':
                    sphere = 'сформированная'

                dct_sphere[sphere] = temp_df
        out_dct.update(dct_sphere)

        """
                           Сохраняем в зависимости от необходимости делать своды по определенным колонкам
                           """
        if len(lst_svod_cols) == 0:
            return out_dct, part_df
        else:
            out_dct = create_result_azbel_prof_identity(base_df, out_dct, lst_svod_cols)

            return out_dct, part_df

    except BadOrderPIA:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Профессиональная идентичность Азбель обнаружены неправильные вопросы. Проверьте названия колонок с вопросами:\n'
                             f'{error_order_message}\n'
                             f'Используйте при создании Яндекс-формы написание вопросов из руководства пользователя программы Лахесис.')
    except BadValuePIA:
        messagebox.showerror('Лахеcис',
                             f'При обработке вопросов теста Профессиональная идентичность Азбель обнаружены неправильные варианты ответов. Проверьте ответы на указанных строках:\n'
                             f'{error_message}\n'
                             f'Используйте при создании Яндекс-формы написание вариантов ответа из руководства пользователя программы Лахесис.')


    except BadCountColumnsPIA:
        messagebox.showerror('Лахеcис',
                             f'Проверьте количество колонок с ответами на тест Профессиональная идентичность Азбель\n'
                             f'Должно быть 20 колонок с ответами')







